{
	"info": {
		"_postman_id": "83814d2b-a919-45d7-9fed-7fe7de13927b",
		"name": "Restful Booker",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Controller: Auth",
			"item": [
				{
					"name": "BEFORE ALL:",
					"item": [
						{
							"name": "REMOVE ENV VARS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d1152090-ba2c-44f6-8706-ffadf1d80661",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e78b5f9a-221c-47b4-beed-917e8fade73b",
										"exec": [
											"// Function that removes all Env Vars apart from the 'hosts'",
											"(function () {",
											"    // Get all the names of our env variables and put them in an array",
											"    const environmentVariables = pm.environment.values.map(function (variable) {",
											"        return variable.key;",
											"    });",
											"    // Filter through the above array but don't add variables that:",
											"    // - Contain the string 'host' in the variable name",
											"    const removeTheseVariables = environmentVariables.filter(function (variable) {",
											"        return !variable.includes(\"host\");",
											"    });",
											"    // Now go through this new array and null these env variables",
											"    return removeTheseVariables.forEach(function (variableName) {",
											"        pm.environment.unset(variableName);",
											"    });",
											"})();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://postman-echo.com/delay/0",
									"protocol": "https",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"delay",
										"0"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Login",
					"item": [
						{
							"name": "[405] Login - Method Not Allowed",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a58ecced-7702-42cc-855b-39e6f2ebb32d",
										"exec": [
											"const body = pm.response.json();",
											"const statusCode = pm.response.code;",
											"",
											"pm.test(\"Status Code returned is 405\", function() {",
											"    pm.expect(statusCode).to.equal(405);",
											"});",
											"",
											"pm.test(\"Error displayed = 'Method Not Allowed'\", function() {",
											"    pm.expect(body).to.have.property(\"error\", \"Method Not Allowed\");",
											"});",
											"",
											"pm.test(\"Path displayed = '/auth/login'\", function() {",
											"    pm.expect(body).to.have.property(\"path\", \"/auth/login\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{hostAuth}}/auth/login",
									"host": [
										"{{hostAuth}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[403] Login - Wrong User",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d0f90880-ac5d-4746-a791-81fe1ceba5cc",
										"exec": [
											"const statusCode = pm.response.code;",
											"",
											"pm.test(\"Status Code returned is 403\", function() {",
											"    pm.expect(statusCode).to.equal(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"nope\",\n    \"password\": \"password\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostAuth}}/auth/login",
									"host": [
										"{{hostAuth}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[403] Login - Wrong Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "14515d0f-9992-4463-9762-a994cf9d50e4",
										"exec": [
											"const statusCode = pm.response.code;",
											"",
											"pm.test(\"Status Code returned is 403\", function() {",
											"    pm.expect(statusCode).to.equal(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"wrong\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostAuth}}/auth/login",
									"host": [
										"{{hostAuth}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[403] Login - Empty User Field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "36a32f70-f563-461c-b218-908bec62a4a1",
										"exec": [
											"const statusCode = pm.response.code;",
											"",
											"pm.test(\"Status Code returned is 403\", function() {",
											"    pm.expect(statusCode).to.equal(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"\",\n    \"password\": \"password\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostAuth}}/auth/login",
									"host": [
										"{{hostAuth}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[403] Login - Empty Password Field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d2771b33-f48d-48b2-805b-682e8a9eee7f",
										"exec": [
											"const statusCode = pm.response.code;",
											"",
											"pm.test(\"Status Code returned is 403\", function() {",
											"    pm.expect(statusCode).to.equal(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostAuth}}/auth/login",
									"host": [
										"{{hostAuth}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[500] Login - Missing User Field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ab6bc769-10ef-4afa-bbe0-c2d505755c3e",
										"exec": [
											"const body = pm.response.json();",
											"const statusCode = pm.response.code;",
											"",
											"pm.test(\"Status Code returned is 500\", function() {",
											"    pm.expect(statusCode).to.equal(500);",
											"});",
											"",
											"pm.test(\"Error displayed = 'Internal Server Error'\", function() {",
											"    pm.expect(body).to.have.property(\"error\", \"Internal Server Error\");",
											"});",
											"",
											"pm.test(\"Path displayed = '/auth/login'\", function() {",
											"    pm.expect(body).to.have.property(\"path\", \"/auth/login\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\": \"password\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostAuth}}/auth/login",
									"host": [
										"{{hostAuth}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[500] Login - Missing Password Field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b361a4fd-c9f0-4513-8876-1946c243860d",
										"exec": [
											"const body = pm.response.json();",
											"const statusCode = pm.response.code;",
											"",
											"pm.test(\"Status Code returned is 500\", function() {",
											"    pm.expect(statusCode).to.equal(500);",
											"});",
											"",
											"pm.test(\"Error displayed = 'Internal Server Error'\", function() {",
											"    pm.expect(body).to.have.property(\"error\", \"Internal Server Error\");",
											"});",
											"",
											"pm.test(\"Path displayed = '/auth/login'\", function() {",
											"    pm.expect(body).to.have.property(\"path\", \"/auth/login\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"admin\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostAuth}}/auth/login",
									"host": [
										"{{hostAuth}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[400] Login - No Request Body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c2bb03c5-4b69-4c85-8bb0-ce7360f69aa2",
										"exec": [
											"const body = pm.response.json();",
											"const statusCode = pm.response.code;",
											"",
											"pm.test(\"Status Code returned is 400\", function() {",
											"    pm.expect(statusCode).to.equal(400);",
											"});",
											"",
											"pm.test(\"Error displayed = 'Bad Request'\", function() {",
											"    pm.expect(body).to.have.property(\"error\", \"Bad Request\");",
											"});",
											"",
											"pm.test(\"Path displayed = '/auth/login'\", function() {",
											"    pm.expect(body).to.have.property(\"path\", \"/auth/login\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostAuth}}/auth/login",
									"host": [
										"{{hostAuth}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[200] Login - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "93e5f6e0-77e8-4a3a-94a3-673b6d93cf90",
										"exec": [
											"const body = pm.response.json();",
											"const statusCode = pm.response.code;",
											"",
											"pm.test(\"Status Code returned is 200\", function() {",
											"    pm.expect(statusCode).to.equal(200);",
											"});",
											"",
											"pm.test(\"Token is returned\", function() {",
											"    pm.expect(body).to.have.property(\"token\");",
											"    pm.expect(body.token).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"password\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostAuth}}/auth/login",
									"host": [
										"{{hostAuth}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Logout",
					"item": [
						{
							"name": "Before All:",
							"item": [
								{
									"name": "[200] Login - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c946a9a8-7666-4622-a08a-a6cfd7d157d0",
												"exec": [
													"const body = pm.response.json();",
													"const statusCode = pm.response.code;",
													"",
													"pm.test(\"Status Code returned is 200\", function() {",
													"    pm.expect(statusCode).to.equal(200);",
													"});",
													"",
													"pm.test(\"Token is returned\", function() {",
													"    pm.expect(body).to.have.property(\"token\");",
													"    pm.expect(body.token).to.not.be.empty;",
													"    pm.environment.set(\"token\", body.token);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"password\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hostAuth}}/auth/login",
											"host": [
												"{{hostAuth}}"
											],
											"path": [
												"auth",
												"login"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "[405] Logout - Method Not Allowed",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ba59ccd-df7a-4630-b417-7423f7b6526a",
										"exec": [
											"const body = pm.response.json();",
											"const statusCode = pm.response.code;",
											"",
											"pm.test(\"Status Code returned is 405\", function() {",
											"    pm.expect(statusCode).to.equal(405);",
											"});",
											"",
											"pm.test(\"Error displayed = 'Method Not Allowed'\", function() {",
											"    pm.expect(body).to.have.property(\"error\", \"Method Not Allowed\");",
											"});",
											"",
											"pm.test(\"Path displayed = '/auth/logout'\", function() {",
											"    pm.expect(body).to.have.property(\"path\", \"/auth/logout\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{hostAuth}}/auth/logout",
									"host": [
										"{{hostAuth}}"
									],
									"path": [
										"auth",
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "[400] Logout - No Request Body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed5c8458-d8f7-499a-b52f-8e4cdbeeafcf",
										"exec": [
											"const body = pm.response.json();",
											"const statusCode = pm.response.code;",
											"",
											"pm.test(\"Status Code returned is 400\", function() {",
											"    pm.expect(statusCode).to.equal(400);",
											"});",
											"",
											"pm.test(\"Error displayed = 'Bad Request'\", function() {",
											"    pm.expect(body).to.have.property(\"error\", \"Bad Request\");",
											"});",
											"",
											"pm.test(\"Path displayed = '/auth/logout'\", function() {",
											"    pm.expect(body).to.have.property(\"path\", \"/auth/logout\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{hostAuth}}/auth/logout",
									"host": [
										"{{hostAuth}}"
									],
									"path": [
										"auth",
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "[200] Logout - Token Does Not Exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "573c3ebf-299e-4125-b67c-f831e4f8a0e5",
										"exec": [
											"const statusCode = pm.response.code;",
											"",
											"pm.test(\"Status Code returned is 200\", function() {",
											"    pm.expect(statusCode).to.equal(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"token\": \"TEST123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostAuth}}/auth/logout",
									"host": [
										"{{hostAuth}}"
									],
									"path": [
										"auth",
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "[200] Logout - Empty Token Field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8780c50c-3a27-4ed1-b1f6-719ec3e20136",
										"exec": [
											"const statusCode = pm.response.code;",
											"",
											"pm.test(\"Status Code returned is 200\", function() {",
											"    pm.expect(statusCode).to.equal(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"token\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostAuth}}/auth/logout",
									"host": [
										"{{hostAuth}}"
									],
									"path": [
										"auth",
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "[200] Logout - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b2be3190-d3b3-48fa-9a34-59eab3e6699c",
										"exec": [
											"const statusCode = pm.response.code;",
											"",
											"pm.test(\"Status Code returned is 200\", function() {",
											"    pm.expect(statusCode).to.equal(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"token\": \"{{token}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostAuth}}/auth/logout",
									"host": [
										"{{hostAuth}}"
									],
									"path": [
										"auth",
										"logout"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Validate",
					"item": [
						{
							"name": "Before All:",
							"item": [
								{
									"name": "[200] Login - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7810b6ac-9358-4d00-9adf-837cfa40999c",
												"exec": [
													"const body = pm.response.json();",
													"const statusCode = pm.response.code;",
													"",
													"pm.test(\"Status Code returned is 200\", function() {",
													"    pm.expect(statusCode).to.equal(200);",
													"});",
													"",
													"pm.test(\"Token is returned\", function() {",
													"    pm.expect(body).to.have.property(\"token\");",
													"    pm.expect(body.token).to.not.be.empty;",
													"    pm.environment.set(\"token\", body.token);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"password\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hostAuth}}/auth/login",
											"host": [
												"{{hostAuth}}"
											],
											"path": [
												"auth",
												"login"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "[405] Validate - Method Not Allowed",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fb8643e6-8dfd-43c4-adcd-ecb3632b8dc5",
										"exec": [
											"const body = pm.response.json();",
											"const statusCode = pm.response.code;",
											"",
											"pm.test(\"Status Code returned is 405\", function() {",
											"    pm.expect(statusCode).to.equal(405);",
											"});",
											"",
											"pm.test(\"Error displayed = 'Method Not Allowed'\", function() {",
											"    pm.expect(body).to.have.property(\"error\", \"Method Not Allowed\");",
											"});",
											"",
											"pm.test(\"Path displayed = '/auth/validate'\", function() {",
											"    pm.expect(body).to.have.property(\"path\", \"/auth/validate\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{hostAuth}}/auth/validate",
									"host": [
										"{{hostAuth}}"
									],
									"path": [
										"auth",
										"validate"
									]
								}
							},
							"response": []
						},
						{
							"name": "[400] Validate - No Request Body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0ec12d3a-9132-46a8-b44b-3f2963b0a69a",
										"exec": [
											"const body = pm.response.json();",
											"const statusCode = pm.response.code;",
											"",
											"pm.test(\"Status Code returned is 400\", function() {",
											"    pm.expect(statusCode).to.equal(400);",
											"});",
											"",
											"pm.test(\"Error displayed = 'Bad Request'\", function() {",
											"    pm.expect(body).to.have.property(\"error\", \"Bad Request\");",
											"});",
											"",
											"pm.test(\"Path displayed = '/auth/validate'\", function() {",
											"    pm.expect(body).to.have.property(\"path\", \"/auth/validate\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostAuth}}/auth/validate",
									"host": [
										"{{hostAuth}}"
									],
									"path": [
										"auth",
										"validate"
									]
								}
							},
							"response": []
						},
						{
							"name": "[403] Validate - Token Does Not Exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1736dbb-1dec-4090-9759-ecff6f4e8423",
										"exec": [
											"const statusCode = pm.response.code;",
											"",
											"pm.test(\"Status Code returned is 403\", function() {",
											"    pm.expect(statusCode).to.equal(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"token\": \"TEST123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostAuth}}/auth/validate",
									"host": [
										"{{hostAuth}}"
									],
									"path": [
										"auth",
										"validate"
									]
								}
							},
							"response": []
						},
						{
							"name": "[403] Validate - Empty Token Field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8dfe4146-cdb3-45f1-a6f5-26d6f3af15a4",
										"exec": [
											"const statusCode = pm.response.code;",
											"",
											"pm.test(\"Status Code returned is 403\", function() {",
											"    pm.expect(statusCode).to.equal(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"token\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostAuth}}/auth/validate",
									"host": [
										"{{hostAuth}}"
									],
									"path": [
										"auth",
										"validate"
									]
								}
							},
							"response": []
						},
						{
							"name": "[200] Validate - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "30ef5691-bd07-46b1-9474-c679498dc911",
										"exec": [
											"const statusCode = pm.response.code;",
											"",
											"pm.test(\"Status Code returned is 200\", function() {",
											"    pm.expect(statusCode).to.equal(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"token\": \"{{token}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostAuth}}/auth/logout",
									"host": [
										"{{hostAuth}}"
									],
									"path": [
										"auth",
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "[200] Logout - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "492557dc-c386-4807-bb7a-990213b621ec",
										"exec": [
											"const statusCode = pm.response.code;",
											"",
											"pm.test(\"Status Code returned is 200\", function() {",
											"    pm.expect(statusCode).to.equal(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"token\": \"{{token}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostAuth}}/auth/logout",
									"host": [
										"{{hostAuth}}"
									],
									"path": [
										"auth",
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "[404] Validate - Confirm Expired Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ef16ec9a-a59e-4ecd-a805-c51c509de17f",
										"exec": [
											"const statusCode = pm.response.code;",
											"",
											"// This endpoint returns a 200 even when passing an expired token.",
											"pm.test(\"KNOWN FAILURE - Status Code returned is 404\", function() {",
											"    pm.expect(statusCode).to.equal(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"token\": \"{{token}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostAuth}}/auth/logout",
									"host": [
										"{{hostAuth}}"
									],
									"path": [
										"auth",
										"logout"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Controller: Branding",
			"item": [
				{
					"name": "BEFORE ALL:",
					"item": [
						{
							"name": "REMOVE ENV VARS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5b01a5aa-4b40-4552-8e29-e6ec16f7af4e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c7dce7c9-eee5-47d1-9e01-2a3808db42c2",
										"exec": [
											"// Function that removes all Env Vars apart from the 'hosts'",
											"(function () {",
											"    // Get all the names of our env variables and put them in an array",
											"    const environmentVariables = pm.environment.values.map(function (variable) {",
											"        return variable.key;",
											"    });",
											"    // Filter through the above array but don't add variables that:",
											"    // - Contain the string 'host' in the variable name",
											"    const removeTheseVariables = environmentVariables.filter(function (variable) {",
											"        return !variable.includes(\"host\");",
											"    });",
											"    // Now go through this new array and null these env variables",
											"    return removeTheseVariables.forEach(function (variableName) {",
											"        pm.environment.unset(variableName);",
											"    });",
											"})();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://postman-echo.com/delay/0",
									"protocol": "https",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"delay",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "[200] Login - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0065f3c8-d27c-4ede-9f82-80c01c2157a8",
										"exec": [
											"const body = pm.response.json();",
											"const statusCode = pm.response.code;",
											"",
											"pm.test(\"Status Code returned is 200\", function() {",
											"    pm.expect(statusCode).to.equal(200);",
											"});",
											"",
											"pm.test(\"Token is returned\", function() {",
											"    pm.expect(body).to.have.property(\"token\");",
											"    pm.expect(body.token).to.not.be.empty;",
											"    pm.environment.set(\"token\", body.token);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9ebfdc91-06a7-412a-9332-14229d5e3acd",
										"exec": [
											"// Function that removes all Env Vars apart from the 'hosts'",
											"(function () {",
											"    // Get all the names of our env variables and put them in an array",
											"    const environmentVariables = pm.environment.values.map(function (variable) {",
											"        return variable.key;",
											"    });",
											"    // Filter through the above array but don't add variables that:",
											"    // - Contain the string 'host' in the variable name",
											"    const removeTheseVariables = environmentVariables.filter(function (variable) {",
											"        return !variable.includes(\"host\");",
											"    });",
											"    // Now go through this new array and null these env variables",
											"    return removeTheseVariables.forEach(function (variableName) {",
											"        pm.environment.unset(\"variableName\");",
											"        // pm.environment.set(variableName, null);",
											"    });",
											"})();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"password\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostAuth}}/auth/login",
									"host": [
										"{{hostAuth}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[200] Branding - Reset Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "97edcce9-b6cc-4671-84e8-91a6c6a09110",
										"exec": [
											"const body = pm.response.json();",
											"const statusCode = pm.response.code;",
											"",
											"pm.test(\"Status Code returned is 202\", function() {",
											"    pm.expect(statusCode).to.equal(202);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Shady Meadows B&B\",\n    \"map\": {\n        \"latitude\": 52.6351204,\n        \"longitude\": 1.2733774\n    },\n    \"logoUrl\": \"https://www.mwtestconsultancy.co.uk/img/rbp-logo.png\",\n    \"description\": \"Welcome to Shady Meadows, a delightful Bed & Breakfast nestled in the hills on Newingtonfordburyshire. A place so beautiful you will never want to leave. All our rooms have comfortable beds and we provide breakfast from the locally sourced supermarket. It is a delightful place.\",\n    \"contact\": {\n        \"name\": \"Shady Meadows B&B\",\n        \"address\": \"The Old Farmhouse, Shady Street, Newfordburyshire, NE1 410S\",\n        \"phone\": \"012345678901\",\n        \"email\": \"fake@fakeemail.com\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostBranding}}/branding/",
									"host": [
										"{{hostBranding}}"
									],
									"path": [
										"branding",
										""
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Negative Tests",
					"item": [
						{
							"name": "[403] Branding - No Token Supplied",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0d9c8fd7-6659-4182-9ef5-bf73f8c43a3a",
										"exec": [
											"const statusCode = pm.response.code;",
											"",
											"pm.test(\"Status Code returned is 403\", function() {",
											"    pm.expect(statusCode).to.equal(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Shady Meadows B&B\",\n    \"map\": {\n        \"latitude\": 52.6351204,\n        \"longitude\": 1.2733774\n    },\n    \"logoUrl\": \"https://www.mwtestconsultancy.co.uk/img/rbp-logo.png\",\n    \"description\": \"TEST\",\n    \"contact\": {\n        \"name\": \"Shady Meadows B&B\",\n        \"address\": \"The Old Farmhouse, Shady Street, Newfordburyshire, NE1 410S\",\n        \"phone\": \"012345678901\",\n        \"email\": \"fake@fakeemail.com\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostBranding}}/branding/",
									"host": [
										"{{hostBranding}}"
									],
									"path": [
										"branding",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "[400] Branding - Blank Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "45d1ee74-805a-4da7-ba7d-2682218bb817",
										"exec": [
											"const statusCode = pm.response.code;",
											"const body = pm.response.json();",
											"",
											"pm.test(\"Status Code returned is 400\", function () {",
											"    pm.expect(statusCode).to.equal(400);",
											"});",
											"",
											"pm.test(\"Expects the response body to match the 'Branding Error' schema\", function () {",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"schemaBrandingError\"));",
											"});",
											"",
											"pm.test(\"'errorCode' is 400\", function () {",
											"    pm.expect(body).to.have.property(\"errorCode\", 400);",
											"});",
											"",
											"pm.test(\"'error' is 'BAD_REQUEST'\", function () {",
											"    pm.expect(body).to.have.property(\"error\", \"BAD_REQUEST\");",
											"});",
											"",
											"pm.test(\"'fieldErrors' array contains 2 errors\", function () {",
											"    pm.expect(body.fieldErrors).to.have.lengthOf(2);",
											"});",
											"",
											"pm.test(\"'fieldErrors' array contains 'size must be between 3 and 100' error\", function () {",
											"    pm.expect(body.fieldErrors).to.include(\"size must be between 3 and 100\");",
											"});",
											"",
											"pm.test(\"'fieldErrors' array contains 'Name should not be blank' error\", function () {",
											"    pm.expect(body.fieldErrors).to.include(\"Name should not be blank\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"value": "token={{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"\",\n    \"map\": {\n        \"latitude\": 52.6351204,\n        \"longitude\": 1.2733774\n    },\n    \"logoUrl\": \"https://www.mwtestconsultancy.co.uk/img/rbp-logo.png\",\n    \"description\": \"TEST\",\n    \"contact\": {\n        \"name\": \"Shady Meadows B&B\",\n        \"address\": \"The Old Farmhouse, Shady Street, Newfordburyshire, NE1 410S\",\n        \"phone\": \"012345678901\",\n        \"email\": \"fake@fakeemail.com\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostBranding}}/branding/",
									"host": [
										"{{hostBranding}}"
									],
									"path": [
										"branding",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "[400] Branding - Blank Logo URL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4181cf31-5002-4453-a335-f62efdb518cc",
										"exec": [
											"const statusCode = pm.response.code;",
											"const body = pm.response.json();",
											"",
											"pm.test(\"Status Code returned is 400\", function () {",
											"    pm.expect(statusCode).to.equal(400);",
											"});",
											"",
											"pm.test(\"Expects the response body to match the 'Branding Error' schema\", function () {",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"schemaBrandingError\"));",
											"});",
											"",
											"pm.test(\"'errorCode' is 400\", function () {",
											"    pm.expect(body).to.have.property(\"errorCode\", 400);",
											"});",
											"",
											"pm.test(\"'error' is 'BAD_REQUEST'\", function () {",
											"    pm.expect(body).to.have.property(\"error\", \"BAD_REQUEST\");",
											"});",
											"",
											"pm.test(\"'fieldErrors' array contains 1 error\", function () {",
											"    pm.expect(body.fieldErrors).to.have.lengthOf(1);",
											"});",
											"",
											"pm.test(\"'fieldErrors' array contains 'Url should not be blank' error\", function () {",
											"    pm.expect(body.fieldErrors).to.include(\"Url should not be blank\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"value": "token={{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Shady Meadows B&B\",\n    \"map\": {\n        \"latitude\": 52.6351204,\n        \"longitude\": 1.2733774\n    },\n    \"logoUrl\": \"\",\n    \"description\": \"TEST\",\n    \"contact\": {\n        \"name\": \"Shady Meadows B&B\",\n        \"address\": \"The Old Farmhouse, Shady Street, Newfordburyshire, NE1 410S\",\n        \"phone\": \"012345678901\",\n        \"email\": \"fake@fakeemail.com\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostBranding}}/branding/",
									"host": [
										"{{hostBranding}}"
									],
									"path": [
										"branding",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "[400] Branding - Blank Description",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "54407658-b339-4788-92bf-c6083209314b",
										"exec": [
											"const statusCode = pm.response.code;",
											"const body = pm.response.json();",
											"",
											"pm.test(\"Status Code returned is 400\", function () {",
											"    pm.expect(statusCode).to.equal(400);",
											"});",
											"",
											"pm.test(\"Expects the response body to match the 'Branding Error' schema\", function () {",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"schemaBrandingError\"));",
											"});",
											"",
											"pm.test(\"'errorCode' is 400\", function () {",
											"    pm.expect(body).to.have.property(\"errorCode\", 400);",
											"});",
											"",
											"pm.test(\"'error' is 'BAD_REQUEST'\", function () {",
											"    pm.expect(body).to.have.property(\"error\", \"BAD_REQUEST\");",
											"});",
											"",
											"pm.test(\"'fieldErrors' array contains 2 errors\", function () {",
											"    pm.expect(body.fieldErrors).to.have.lengthOf(2);",
											"});",
											"",
											"pm.test(\"'fieldErrors' array contains 'Description should not be blank' error\", function () {",
											"    pm.expect(body.fieldErrors).to.include(\"Description should not be blank\");",
											"});",
											"",
											"pm.test(\"'fieldErrors' array contains 'size must be between 3 and 500' error\", function () {",
											"    pm.expect(body.fieldErrors).to.include(\"size must be between 3 and 500\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"value": "token={{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Shady Meadows B&B\",\n    \"map\": {\n        \"latitude\": 52.6351204,\n        \"longitude\": 1.2733774\n    },\n    \"logoUrl\": \"https://www.mwtestconsultancy.co.uk/img/rbp-logo.png\",\n    \"description\": \"\",\n    \"contact\": {\n        \"name\": \"Shady Meadows B&B\",\n        \"address\": \"The Old Farmhouse, Shady Street, Newfordburyshire, NE1 410S\",\n        \"phone\": \"012345678901\",\n        \"email\": \"fake@fakeemail.com\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostBranding}}/branding/",
									"host": [
										"{{hostBranding}}"
									],
									"path": [
										"branding",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "[400] Branding - Blank Contact Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8e577838-6e6c-4ca7-896e-8e11a247f1d9",
										"exec": [
											"const statusCode = pm.response.code;",
											"const body = pm.response.json();",
											"",
											"pm.test(\"Status Code returned is 400\", function () {",
											"    pm.expect(statusCode).to.equal(400);",
											"});",
											"",
											"pm.test(\"Expects the response body to match the 'Branding Error' schema\", function () {",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"schemaBrandingError\"));",
											"});",
											"",
											"pm.test(\"'errorCode' is 400\", function () {",
											"    pm.expect(body).to.have.property(\"errorCode\", 400);",
											"});",
											"",
											"pm.test(\"'error' is 'BAD_REQUEST'\", function () {",
											"    pm.expect(body).to.have.property(\"error\", \"BAD_REQUEST\");",
											"});",
											"",
											"pm.test(\"'fieldErrors' array contains 2 errors\", function () {",
											"    pm.expect(body.fieldErrors).to.have.lengthOf(2);",
											"});",
											"",
											"pm.test(\"'fieldErrors' array contains 'Contact Name should not be blank' error\", function () {",
											"    pm.expect(body.fieldErrors).to.include(\"Contact Name should not be blank\");",
											"});",
											"",
											"pm.test(\"'fieldErrors' array contains 'size must be between 3 and 40' error\", function () {",
											"    pm.expect(body.fieldErrors).to.include(\"size must be between 3 and 40\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Shady Meadows B&B\",\n    \"map\": {\n        \"latitude\": 52.6351204,\n        \"longitude\": 1.2733774\n    },\n    \"logoUrl\": \"https://www.mwtestconsultancy.co.uk/img/rbp-logo.png\",\n    \"description\": \"Welcome to Shady Meadows, a delightful Bed & Breakfast nestled in the hills on Newingtonfordburyshire. A place so beautiful you will never want to leave. All our rooms have comfortable beds and we provide breakfast from the locally sourced supermarket. It is a delightful place.\",\n    \"contact\": {\n        \"name\": \"\",\n        \"address\": \"The Old Farmhouse, Shady Street, Newfordburyshire, NE1 410S\",\n        \"phone\": \"012345678901\",\n        \"email\": \"fake@fakeemail.com\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostBranding}}/branding/",
									"host": [
										"{{hostBranding}}"
									],
									"path": [
										"branding",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "[400] Branding - Blank Contact Address",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2dd947e8-d8ed-40c9-89e4-0143544c4224",
										"exec": [
											"const statusCode = pm.response.code;",
											"const body = pm.response.json();",
											"",
											"pm.test(\"Status Code returned is 400\", function () {",
											"    pm.expect(statusCode).to.equal(400);",
											"});",
											"",
											"pm.test(\"Expects the response body to match the 'Branding Error' schema\", function () {",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"schemaBrandingError\"));",
											"});",
											"",
											"pm.test(\"'errorCode' is 400\", function () {",
											"    pm.expect(body).to.have.property(\"errorCode\", 400);",
											"});",
											"",
											"pm.test(\"'error' is 'BAD_REQUEST'\", function () {",
											"    pm.expect(body).to.have.property(\"error\", \"BAD_REQUEST\");",
											"});",
											"",
											"pm.test(\"'fieldErrors' array contains 2 errors\", function () {",
											"    pm.expect(body.fieldErrors).to.have.lengthOf(2);",
											"});",
											"",
											"pm.test(\"'fieldErrors' array contains 'Address should not be blank' error\", function () {",
											"    pm.expect(body.fieldErrors).to.include(\"Address should not be blank\");",
											"});",
											"",
											"pm.test(\"'fieldErrors' array contains 'size must be between 10 and 200' error\", function () {",
											"    pm.expect(body.fieldErrors).to.include(\"size must be between 10 and 200\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Shady Meadows B&B\",\n    \"map\": {\n        \"latitude\": 52.6351204,\n        \"longitude\": 1.2733774\n    },\n    \"logoUrl\": \"https://www.mwtestconsultancy.co.uk/img/rbp-logo.png\",\n    \"description\": \"Welcome to Shady Meadows, a delightful Bed & Breakfast nestled in the hills on Newingtonfordburyshire. A place so beautiful you will never want to leave. All our rooms have comfortable beds and we provide breakfast from the locally sourced supermarket. It is a delightful place.\",\n    \"contact\": {\n        \"name\": \"Shady Meadows B&B\",\n        \"address\": \"\",\n        \"phone\": \"012345678901\",\n        \"email\": \"fake@fakeemail.com\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostBranding}}/branding/",
									"host": [
										"{{hostBranding}}"
									],
									"path": [
										"branding",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "[400] Branding - Blank Contact Phone Number",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3db49927-f6e7-48f6-a8f5-a13374eb0020",
										"exec": [
											"const statusCode = pm.response.code;",
											"const body = pm.response.json();",
											"",
											"pm.test(\"Status Code returned is 400\", function () {",
											"    pm.expect(statusCode).to.equal(400);",
											"});",
											"",
											"pm.test(\"Expects the response body to match the 'Branding Error' schema\", function () {",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"schemaBrandingError\"));",
											"});",
											"",
											"pm.test(\"'errorCode' is 400\", function () {",
											"    pm.expect(body).to.have.property(\"errorCode\", 400);",
											"});",
											"",
											"pm.test(\"'error' is 'BAD_REQUEST'\", function () {",
											"    pm.expect(body).to.have.property(\"error\", \"BAD_REQUEST\");",
											"});",
											"",
											"pm.test(\"'fieldErrors' array contains 2 errors\", function () {",
											"    pm.expect(body.fieldErrors).to.have.lengthOf(2);",
											"});",
											"",
											"pm.test(\"'fieldErrors' array contains 'must be greater than or equal to 11' error\", function () {",
											"    pm.expect(body.fieldErrors).to.include(\"must be greater than or equal to 11\");",
											"});",
											"",
											"pm.test(\"'fieldErrors' array contains 'Phone should not be blank' error\", function () {",
											"    pm.expect(body.fieldErrors).to.include(\"Phone should not be blank\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Shady Meadows B&B\",\n    \"map\": {\n        \"latitude\": 52.6351204,\n        \"longitude\": 1.2733774\n    },\n    \"logoUrl\": \"https://www.mwtestconsultancy.co.uk/img/rbp-logo.png\",\n    \"description\": \"Welcome to Shady Meadows, a delightful Bed & Breakfast nestled in the hills on Newingtonfordburyshire. A place so beautiful you will never want to leave. All our rooms have comfortable beds and we provide breakfast from the locally sourced supermarket. It is a delightful place.\",\n    \"contact\": {\n        \"name\": \"Shady Meadows B&B\",\n        \"address\": \"The Old Farmhouse, Shady Street, Newfordburyshire, NE1 410S\",\n        \"phone\": \"\",\n        \"email\": \"fake@fakeemail.com\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostBranding}}/branding/",
									"host": [
										"{{hostBranding}}"
									],
									"path": [
										"branding",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "[400] Branding - Blank Contact Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b08d230c-9e50-4e50-9ec8-5aca2fd2edef",
										"exec": [
											"const statusCode = pm.response.code;",
											"const body = pm.response.json();",
											"",
											"pm.test(\"Status Code returned is 400\", function () {",
											"    pm.expect(statusCode).to.equal(400);",
											"});",
											"",
											"pm.test(\"Expects the response body to match the 'Branding Error' schema\", function () {",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"schemaBrandingError\"));",
											"});",
											"",
											"pm.test(\"'errorCode' is 400\", function () {",
											"    pm.expect(body).to.have.property(\"errorCode\", 400);",
											"});",
											"",
											"pm.test(\"'error' is 'BAD_REQUEST'\", function () {",
											"    pm.expect(body).to.have.property(\"error\", \"BAD_REQUEST\");",
											"});",
											"",
											"pm.test(\"'fieldErrors' array contains 1 error\", function () {",
											"    pm.expect(body.fieldErrors).to.have.lengthOf(1);",
											"});",
											"",
											"pm.test(\"'fieldErrors' array contains 'Email should not be blank' error\", function () {",
											"    pm.expect(body.fieldErrors).to.include(\"Email should not be blank\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Shady Meadows B&B\",\n    \"map\": {\n        \"latitude\": 52.6351204,\n        \"longitude\": 1.2733774\n    },\n    \"logoUrl\": \"https://www.mwtestconsultancy.co.uk/img/rbp-logo.png\",\n    \"description\": \"Welcome to Shady Meadows, a delightful Bed & Breakfast nestled in the hills on Newingtonfordburyshire. A place so beautiful you will never want to leave. All our rooms have comfortable beds and we provide breakfast from the locally sourced supermarket. It is a delightful place.\",\n    \"contact\": {\n        \"name\": \"Shady Meadows B&B\",\n        \"address\": \"The Old Farmhouse, Shady Street, Newfordburyshire, NE1 410S\",\n        \"phone\": \"012345678901\",\n        \"email\": \"\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostBranding}}/branding/",
									"host": [
										"{{hostBranding}}"
									],
									"path": [
										"branding",
										""
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Successfully Update",
					"item": [
						{
							"name": "[202] Branding - Update Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4c64a3b1-c697-4c52-ae52-1a9e80f13d16",
										"exec": [
											"const body = pm.response.json();",
											"const statusCode = pm.response.code;",
											"",
											"pm.test(\"Status Code returned is 202\", function() {",
											"    pm.expect(statusCode).to.equal(202);",
											"});",
											"",
											"pm.test(\"Expects the response body to match the 'Branding' schema\", function () {",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"schemaBranding\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"The Liverpool Love Shack\",\n    \"map\": {\n        \"latitude\": 12.34,\n        \"longitude\": 56.78\n    },\n    \"logoUrl\": \"https://www.liverpool-love-shack.co.uk/images/logo.png\",\n    \"description\": \"Alright. Welcome to The Liverpool Love Shack. This is a proper boss gaff to take your bird la.\",\n    \"contact\": {\n        \"name\": \"The Liverpool Love Shack\",\n        \"address\": \"The Liverpool Love Shack, Dodgy Road, Liverpool, L1 8PP\",\n        \"phone\": \"09876543210\",\n        \"email\": \"tezza@loveshack.co.uk\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostBranding}}/branding/",
									"host": [
										"{{hostBranding}}"
									],
									"path": [
										"branding",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "[200] Branding - Confirm Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8e875d7b-b183-407e-9486-e7a7f98c2327",
										"exec": [
											"const body = pm.response.json();",
											"const statusCode = pm.response.code;",
											"",
											"pm.test(\"Status Code returned is 200\", function () {",
											"    pm.expect(statusCode).to.equal(200);",
											"});",
											"",
											"pm.test(\"Expects the response body to match the 'Branding' schema\", function () {",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"schemaBranding\"));",
											"});",
											"",
											"pm.test(\"Expects the 'name' to match the updated value\", function () {",
											"    pm.expect(body).to.have.property(\"name\", \"The Liverpool Love Shack\");",
											"});",
											"",
											"pm.test(\"Expects the 'map.latitude' to match the updated value\", function () {",
											"    pm.expect(body.map).to.have.property(\"latitude\", 12.34);",
											"});",
											"",
											"pm.test(\"Expects the 'map.longitude' to match the updated value\", function () {",
											"    pm.expect(body.map).to.have.property(\"longitude\", 56.78);",
											"});",
											"",
											"pm.test(\"Expects the 'logoUrl' to match the updated value\", function () {",
											"    pm.expect(body).to.have.property(\"logoUrl\", \"https://www.liverpool-love-shack.co.uk/images/logo.png\");",
											"});",
											"",
											"pm.test(\"Expects the 'description' to match the updated value\", function () {",
											"    pm.expect(body).to.have.property(\"description\", \"Alright. Welcome to The Liverpool Love Shack. This is a proper boss gaff to take your bird la.\");",
											"});",
											"",
											"pm.test(\"Expects the 'contact.name' to match the updated value\", function () {",
											"    pm.expect(body.contact).to.have.property(\"name\", \"The Liverpool Love Shack\");",
											"});",
											"",
											"pm.test(\"Expects the 'contact.address' to match the updated value\", function () {",
											"    pm.expect(body.contact).to.have.property(\"address\", \"The Liverpool Love Shack, Dodgy Road, Liverpool, L1 8PP\");",
											"});",
											"",
											"pm.test(\"Expects the 'contact.phone' to match the updated value\", function() {",
											"    pm.expect(body.contact).to.have.property(\"phone\", \"09876543210\");",
											"});",
											"",
											"pm.test(\"Expects the 'contact.email' to match the updated value\", function() {",
											"    pm.expect(body.contact).to.have.property(\"email\", \"tezza@loveshack.co.uk\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{hostBranding}}/branding/",
									"host": [
										"{{hostBranding}}"
									],
									"path": [
										"branding",
										""
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "16456bca-dfe0-4728-898d-da1117ca53e9",
						"type": "text/javascript",
						"exec": [
							"pm.environment.set(\"schemaBranding\", {",
							"    \"type\": \"object\",",
							"    \"required\": [",
							"        \"name\",",
							"        \"map\",",
							"        \"logoUrl\",",
							"        \"description\",",
							"        \"contact\"",
							"    ],",
							"    \"properties\": {",
							"        \"name\": {",
							"            \"type\": \"string\",",
							"            \"minLength\": 3,",
							"            \"maxLength\": 100,",
							"            \"pattern\": \"[A-Za-z& ]*\"",
							"        },",
							"        \"map\": {",
							"            \"type\": \"object\",",
							"            \"required\": [",
							"                \"latitude\",",
							"                \"longitude\"",
							"            ],",
							"            \"properties\": {",
							"                \"latitude\": {",
							"                    \"type\": \"number\"",
							"                },",
							"                \"longitude\": {",
							"                    \"type\": \"number\"",
							"                }",
							"            },",
							"            \"additionalProperties\": true",
							"        },",
							"        \"logoUrl\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"description\": {",
							"            \"type\": \"string\",",
							"            \"minLength\": 3,",
							"            \"maxLength\": 500,",
							"            \"pattern\": \"[A-Za-z&. ]*\"",
							"        },",
							"        \"contact\": {",
							"            \"type\": \"object\",",
							"            \"required\": [",
							"                \"name\",",
							"                \"address\",",
							"                \"phone\",",
							"                \"email\"",
							"            ],",
							"            \"properties\": {",
							"                \"name\": {",
							"                    \"type\": \"string\",",
							"                    \"minLength\": 3,",
							"                    \"maxLength\": 40,",
							"                    \"pattern\": \"[A-Za-z& ]*\"",
							"                },",
							"                \"address\": {",
							"                    \"type\": \"string\",",
							"                    \"minLength\": 10,",
							"                    \"maxLength\": 200,",
							"                },",
							"                \"phone\": {",
							"                    \"type\": \"string\"",
							"                },",
							"                \"email\": {",
							"                    \"type\": \"string\"",
							"                }",
							"            },",
							"            \"additionalProperties\": true",
							"        }",
							"    },",
							"    \"additionalProperties\": true",
							"});",
							"",
							"pm.environment.set(\"schemaBrandingError\", {",
							"    \"type\": \"object\",",
							"    \"required\": [",
							"        \"errorCode\",",
							"        \"error\",",
							"        \"errorMessage\",",
							"        \"fieldErrors\"",
							"    ],",
							"    \"properties\": {",
							"        \"errorCode\": {",
							"            \"type\": \"integer\",",
							"            \"minimum\": 200,",
							"            \"maximum\": 599",
							"        },",
							"        \"error\": {",
							"            \"type\": \"string\",",
							"            \"minLength\": 1",
							"        },",
							"        \"errorMessage\": {",
							"            \"type\": \"string\",",
							"            \"minLength\": 1",
							"        },",
							"        \"fieldErrors\": {",
							"            \"type\": \"array\",",
							"            \"additionalItems\": true,",
							"            \"items\": {",
							"                \"allOf\": [",
							"                    {",
							"                        \"type\": \"string\",",
							"                        \"minLength\": 1",
							"                    }",
							"                ]",
							"            }",
							"        }",
							"    },",
							"    \"additionalProperties\": true",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e1d6d072-5734-4e76-be4c-d4aa50d1b7f8",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Controller: Booking",
			"item": [
				{
					"name": "BEFORE ALL:",
					"item": [
						{
							"name": "REMOVE ENV VARS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "82dba227-797e-4017-b191-585df84758ba",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "075d8f85-6ae9-4761-9f91-57fb1a286f9a",
										"exec": [
											"// Function that removes all Env Vars apart from the 'hosts'",
											"(function () {",
											"    // Get all the names of our env variables and put them in an array",
											"    const environmentVariables = pm.environment.values.map(function (variable) {",
											"        return variable.key;",
											"    });",
											"    // Filter through the above array but don't add variables that:",
											"    // - Contain the string 'host' in the variable name",
											"    const removeTheseVariables = environmentVariables.filter(function (variable) {",
											"        return !variable.includes(\"host\");",
											"    });",
											"    // Now go through this new array and null these env variables",
											"    return removeTheseVariables.forEach(function (variableName) {",
											"        pm.environment.unset(variableName);",
											"    });",
											"})();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://postman-echo.com/delay/0",
									"protocol": "https",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"delay",
										"0"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "View All Bookings (Room ID)",
					"item": [
						{
							"name": "[200] View All  Bookings",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "25124454-0430-4281-88c8-e92fd7795e71",
										"exec": [
											"const body = pm.response.json();",
											"const statusCode = pm.response.code;",
											"",
											"pm.test(\"Status Code returned is 200\", function () {",
											"    pm.expect(statusCode).to.equal(200);",
											"});",
											"",
											"pm.test(\"Expects the response body to match the 'Bookings' schema\", function () {",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"schemaBookings\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{hostBooking}}/booking/",
									"host": [
										"{{hostBooking}}"
									],
									"path": [
										"booking",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "[200] View All Bookings for Room 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5bb6b3d-9866-4ec5-9fe0-11160c467c57",
										"exec": [
											"const body = pm.response.json();",
											"const statusCode = pm.response.code;",
											"",
											"pm.test(\"Status Code returned is 200\", function () {",
											"    pm.expect(statusCode).to.equal(200);",
											"});",
											"",
											"pm.test(\"Expects the response body to match the 'Bookings' schema\", function () {",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"schemaBookings\"));",
											"});",
											"",
											"pm.test(\"The 'bookings' array is NOT empty\", function () {",
											"    pm.expect(body.bookings).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{hostBooking}}/booking/?roomid=1",
									"host": [
										"{{hostBooking}}"
									],
									"path": [
										"booking",
										""
									],
									"query": [
										{
											"key": "roomid",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[200] View All  Bookings for Invalid Room",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b1cb6451-8baa-437a-8dc2-c07966557716",
										"exec": [
											"const body = pm.response.json();",
											"const statusCode = pm.response.code;",
											"",
											"pm.test(\"Status Code returned is 200\", function () {",
											"    pm.expect(statusCode).to.equal(200);",
											"});",
											"",
											"pm.test(\"The 'bookings' array is empty\", function () {",
											"    pm.expect(body).to.have.property(\"bookings\");",
											"    pm.expect(body.bookings).to.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{hostBooking}}/booking/?roomid=999",
									"host": [
										"{{hostBooking}}"
									],
									"path": [
										"booking",
										""
									],
									"query": [
										{
											"key": "roomid",
											"value": "999"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a16be793-7040-4d5c-8f6a-0d89ba285f8f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0910697a-9522-48be-afe8-18b2d647f8d2",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Create Booking",
					"item": [
						{
							"name": "Negative Tests",
							"item": [
								{
									"name": "[400] Create Booking - Missing Prop: roomid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a97024fd-f809-4592-a7b6-5ba8c79cb93d",
												"exec": [
													"const statusCode = pm.response.code;",
													"const body = pm.response.json();",
													"",
													"pm.test(\"Status Code returned is 400\", function () {",
													"    pm.expect(statusCode).to.equal(400);",
													"});",
													"",
													"pm.test(\"Expects the response body to match the 'Booking Error' schema\", function () {",
													"    pm.response.to.have.jsonSchema(pm.environment.get(\"schemaBookingError\"));",
													"});",
													"",
													"pm.test(\"'errorCode' is 400\", function () {",
													"    pm.expect(body).to.have.property(\"errorCode\", 400);",
													"});",
													"",
													"pm.test(\"'error' is 'BAD_REQUEST'\", function () {",
													"    pm.expect(body).to.have.property(\"error\", \"BAD_REQUEST\");",
													"});",
													"",
													"pm.test(\"'fieldErrors' array contains 1 error\", function () {",
													"    pm.expect(body.fieldErrors).to.have.lengthOf(1);",
													"});",
													"",
													"pm.test(\"'fieldErrors' array contains 'must be greater than or equal to 1' error\", function () {",
													"    pm.expect(body.fieldErrors).to.include(\"must be greater than or equal to 1\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5267b4a8-f74d-49ed-8587-63e7dcc1b116",
												"exec": [
													"pm.environment.set(\"roomId\", 21);",
													"",
													"const moment = require(\"moment\");",
													"",
													"const getDateInFutureByXDays = function (numberOfDays) {",
													"    return moment().add(numberOfDays, \"days\").format(\"YYYY-MM-DD\");",
													"};",
													"",
													"pm.environment.set(\"tomorrow\", getDateInFutureByXDays(1));",
													"pm.environment.set(\"oneWeekAway\", getDateInFutureByXDays(7));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstname\": \"Paul\",\n    \"lastname\": \"Farrell\",\n    \"depositpaid\": true,\n    \"bookingdates\": {\n        \"checkin\": \"{{tomorrow}}\",\n        \"checkout\": \"{{oneWeekAway}}\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hostBooking}}/booking/",
											"host": [
												"{{hostBooking}}"
											],
											"path": [
												"booking",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "[400] Create Booking - Missing Prop: firstname",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "71920a9f-a95e-457a-a89d-59be08444d03",
												"exec": [
													"const statusCode = pm.response.code;",
													"const body = pm.response.json();",
													"",
													"pm.test(\"Status Code returned is 400\", function () {",
													"    pm.expect(statusCode).to.equal(400);",
													"});",
													"",
													"pm.test(\"Expects the response body to match the 'Booking Error' schema\", function () {",
													"    pm.response.to.have.jsonSchema(pm.environment.get(\"schemaBookingError\"));",
													"});",
													"",
													"pm.test(\"'errorCode' is 400\", function () {",
													"    pm.expect(body).to.have.property(\"errorCode\", 400);",
													"});",
													"",
													"pm.test(\"'error' is 'BAD_REQUEST'\", function () {",
													"    pm.expect(body).to.have.property(\"error\", \"BAD_REQUEST\");",
													"});",
													"",
													"pm.test(\"'fieldErrors' array contains 1 error\", function () {",
													"    pm.expect(body.fieldErrors).to.have.lengthOf(1);",
													"});",
													"",
													"pm.test(\"'fieldErrors' array contains 'Firstname should not be blank' error\", function () {",
													"    pm.expect(body.fieldErrors).to.include(\"Firstname should not be blank\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "811b0c3d-3bbf-417e-bd84-110ea29940ce",
												"exec": [
													"pm.environment.set(\"roomId\", 21);",
													"",
													"const moment = require(\"moment\");",
													"",
													"const getDateInFutureByXDays = function (numberOfDays) {",
													"    return moment().add(numberOfDays, \"days\").format(\"YYYY-MM-DD\");",
													"};",
													"",
													"pm.environment.set(\"tomorrow\", getDateInFutureByXDays(1));",
													"pm.environment.set(\"oneWeekAway\", getDateInFutureByXDays(7));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"roomid\": {{roomId}},\n    \"lastname\": \"Farrell\",\n    \"depositpaid\": true,\n    \"bookingdates\": {\n        \"checkin\": \"{{tomorrow}}\",\n        \"checkout\": \"{{oneWeekAway}}\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hostBooking}}/booking/",
											"host": [
												"{{hostBooking}}"
											],
											"path": [
												"booking",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "[400] Create Booking - Missing Prop: lastname",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "01f6aea0-6478-48f8-bf13-2cbf5ead8a9e",
												"exec": [
													"const statusCode = pm.response.code;",
													"const body = pm.response.json();",
													"",
													"pm.test(\"Status Code returned is 400\", function () {",
													"    pm.expect(statusCode).to.equal(400);",
													"});",
													"",
													"pm.test(\"Expects the response body to match the 'Booking Error' schema\", function () {",
													"    pm.response.to.have.jsonSchema(pm.environment.get(\"schemaBookingError\"));",
													"});",
													"",
													"pm.test(\"'errorCode' is 400\", function () {",
													"    pm.expect(body).to.have.property(\"errorCode\", 400);",
													"});",
													"",
													"pm.test(\"'error' is 'BAD_REQUEST'\", function () {",
													"    pm.expect(body).to.have.property(\"error\", \"BAD_REQUEST\");",
													"});",
													"",
													"pm.test(\"'fieldErrors' array contains 1 error\", function () {",
													"    pm.expect(body.fieldErrors).to.have.lengthOf(1);",
													"});",
													"",
													"pm.test(\"'fieldErrors' array contains 'Lastname should not be blank' error\", function () {",
													"    pm.expect(body.fieldErrors).to.include(\"Lastname should not be blank\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8b7add97-ee39-4db5-a512-ec13b07e7893",
												"exec": [
													"pm.environment.set(\"roomId\", 21);",
													"",
													"const moment = require(\"moment\");",
													"",
													"const getDateInFutureByXDays = function (numberOfDays) {",
													"    return moment().add(numberOfDays, \"days\").format(\"YYYY-MM-DD\");",
													"};",
													"",
													"pm.environment.set(\"tomorrow\", getDateInFutureByXDays(1));",
													"pm.environment.set(\"oneWeekAway\", getDateInFutureByXDays(7));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"roomid\": {{roomId}},\n    \"firstname\": \"Paul\",\n    \"depositpaid\": true,\n    \"bookingdates\": {\n        \"checkin\": \"{{tomorrow}}\",\n        \"checkout\": \"{{oneWeekAway}}\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hostBooking}}/booking/",
											"host": [
												"{{hostBooking}}"
											],
											"path": [
												"booking",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "[400] Create Booking - Missing Pro: bookingdates.checkin",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b1710472-1481-41cf-9892-1b14931d0d64",
												"exec": [
													"const statusCode = pm.response.code;",
													"const body = pm.response.json();",
													"",
													"pm.test(\"Status Code returned is 400\", function () {",
													"    pm.expect(statusCode).to.equal(400);",
													"});",
													"",
													"pm.test(\"Expects the response body to match the 'Booking Error' schema\", function () {",
													"    pm.response.to.have.jsonSchema(pm.environment.get(\"schemaBookingError\"));",
													"});",
													"",
													"pm.test(\"'errorCode' is 400\", function () {",
													"    pm.expect(body).to.have.property(\"errorCode\", 400);",
													"});",
													"",
													"pm.test(\"'error' is 'BAD_REQUEST'\", function () {",
													"    pm.expect(body).to.have.property(\"error\", \"BAD_REQUEST\");",
													"});",
													"",
													"pm.test(\"'fieldErrors' array contains 1 error\", function () {",
													"    pm.expect(body.fieldErrors).to.have.lengthOf(1);",
													"});",
													"",
													"pm.test(\"'fieldErrors' array contains 'must not be null' error\", function () {",
													"    pm.expect(body.fieldErrors).to.include(\"must not be null\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "303d081c-6f0f-46bd-be97-95d294697125",
												"exec": [
													"pm.environment.set(\"roomId\", 20);",
													"",
													"const moment = require(\"moment\");",
													"",
													"const getDateInFutureByXDays = function (numberOfDays) {",
													"    return moment().add(numberOfDays, \"days\").format(\"YYYY-MM-DD\");",
													"};",
													"",
													"pm.environment.set(\"tomorrow\", getDateInFutureByXDays(1));",
													"pm.environment.set(\"oneWeekAway\", getDateInFutureByXDays(7));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"roomid\": {{roomId}},\n    \"firstname\": \"Paul\",\n    \"lastname\": \"Farrell\",\n    \"depositpaid\": true,\n    \"bookingdates\": {\n        \"checkout\": \"{{oneWeekAway}}\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hostBooking}}/booking/",
											"host": [
												"{{hostBooking}}"
											],
											"path": [
												"booking",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "[400] Create Booking - Missing Pro: bookingdates.checkout",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7f3e5e7f-d8ff-47da-860a-2afd684058c3",
												"exec": [
													"const statusCode = pm.response.code;",
													"const body = pm.response.json();",
													"",
													"pm.test(\"Status Code returned is 400\", function () {",
													"    pm.expect(statusCode).to.equal(400);",
													"});",
													"",
													"pm.test(\"Expects the response body to match the 'Booking Error' schema\", function () {",
													"    pm.response.to.have.jsonSchema(pm.environment.get(\"schemaBookingError\"));",
													"});",
													"",
													"pm.test(\"'errorCode' is 400\", function () {",
													"    pm.expect(body).to.have.property(\"errorCode\", 400);",
													"});",
													"",
													"pm.test(\"'error' is 'BAD_REQUEST'\", function () {",
													"    pm.expect(body).to.have.property(\"error\", \"BAD_REQUEST\");",
													"});",
													"",
													"pm.test(\"'fieldErrors' array contains 1 error\", function () {",
													"    pm.expect(body.fieldErrors).to.have.lengthOf(1);",
													"});",
													"",
													"pm.test(\"'fieldErrors' array contains 'must not be null' error\", function () {",
													"    pm.expect(body.fieldErrors).to.include(\"must not be null\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "220e0e52-609a-48ab-89fa-a5299ee9e87b",
												"exec": [
													"pm.environment.set(\"roomId\", 20);",
													"",
													"const moment = require(\"moment\");",
													"",
													"const getDateInFutureByXDays = function (numberOfDays) {",
													"    return moment().add(numberOfDays, \"days\").format(\"YYYY-MM-DD\");",
													"};",
													"",
													"pm.environment.set(\"tomorrow\", getDateInFutureByXDays(1));",
													"pm.environment.set(\"oneWeekAway\", getDateInFutureByXDays(7));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"roomid\": {{roomId}},\n    \"firstname\": \"Paul\",\n    \"lastname\": \"Farrell\",\n    \"depositpaid\": true,\n    \"bookingdates\": {\n        \"checkin\": \"{{tomorrow}}\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hostBooking}}/booking/",
											"host": [
												"{{hostBooking}}"
											],
											"path": [
												"booking",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "[409] Create Booking - Conflicting Room/Date",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d3d445d1-2291-4d15-a78b-314925d2d1d8",
												"exec": [
													"const statusCode = pm.response.code;",
													"",
													"pm.test(\"Status Code returned is 409\", function () {",
													"    pm.expect(statusCode).to.equal(409);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "28cecd29-2b0c-422b-aa2f-9c858ecef94e",
												"exec": [
													"pm.environment.set(\"roomId\", 20);",
													"",
													"const moment = require(\"moment\");",
													"",
													"const getDateInFutureByXDays = function (numberOfDays) {",
													"    return moment().add(numberOfDays, \"days\").format(\"YYYY-MM-DD\");",
													"};",
													"",
													"pm.environment.set(\"tomorrow\", getDateInFutureByXDays(1));",
													"pm.environment.set(\"oneWeekAway\", getDateInFutureByXDays(7));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"roomid\": 1,\n    \"firstname\": \"Paul\",\n    \"lastname\": \"Farrell\",\n    \"depositpaid\": true,\n    \"bookingdates\": {\n        \"checkin\": \"2020-02-01\",\n        \"checkout\": \"2020-02-05\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hostBooking}}/booking/",
											"host": [
												"{{hostBooking}}"
											],
											"path": [
												"booking",
												""
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Success",
							"item": [
								{
									"name": "[201] Create Booking - Deposit Not Paid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b1fe2c65-4e16-4cf3-b37f-d71385f5da28",
												"exec": [
													"const body = pm.response.json();",
													"const statusCode = pm.response.code;",
													"",
													"pm.test(\"Status Code returned is 201\", function () {",
													"    pm.expect(statusCode).to.equal(201);",
													"});",
													"",
													"pm.test(\"Expects the response body to match the 'Bookings' schema\", function () {",
													"    pm.response.to.have.jsonSchema(pm.environment.get(\"schemaCreateBooking\"));",
													"});",
													"",
													"pm.test(\"The 'roomid' displayed is the desired value\", function () {",
													"    pm.expect(body.booking).to.have.property(\"roomid\", pm.environment.get(\"roomId\"));",
													"});",
													"",
													"pm.test(\"The 'firstname' displayed is the desired value\", function () {",
													"    pm.expect(body.booking).to.have.property(\"firstname\", \"Paul\");",
													"});",
													"",
													"pm.test(\"The 'lastname' displayed is the desired value\", function () {",
													"    pm.expect(body.booking).to.have.property(\"lastname\", \"Farrell\");",
													"});",
													"",
													"pm.test(\"The 'depositpaid' is 'false'\", function () {",
													"    pm.expect(body.booking).to.have.property(\"depositpaid\", false);",
													"});",
													"",
													"pm.test(\"The 'bookingdates.checkin' date is tomorrow\", function () {",
													"    pm.expect(body.booking.bookingdates).to.have.property(\"checkin\", pm.environment.get(\"tomorrow\"));",
													"});",
													"",
													"pm.test(\"The 'bookingdates.checkout' date is one week from now\", function () {",
													"    pm.expect(body.booking.bookingdates).to.have.property(\"checkout\", pm.environment.get(\"oneWeekAway\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "42bef320-83d1-46bc-8154-b0cda5950435",
												"exec": [
													"pm.environment.set(\"roomId\", 25);",
													"",
													"const moment = require(\"moment\");",
													"",
													"const getDateInFutureByXDays = function (numberOfDays) {",
													"    return moment().add(numberOfDays, \"days\").format(\"YYYY-MM-DD\");",
													"};",
													"",
													"pm.environment.set(\"tomorrow\", getDateInFutureByXDays(1));",
													"pm.environment.set(\"oneWeekAway\", getDateInFutureByXDays(7));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"roomid\": {{roomId}},\n    \"firstname\": \"Paul\",\n    \"lastname\": \"Farrell\",\n    \"depositpaid\": false,\n    \"bookingdates\": {\n        \"checkin\": \"{{tomorrow}}\",\n        \"checkout\": \"{{oneWeekAway}}\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hostBooking}}/booking/",
											"host": [
												"{{hostBooking}}"
											],
											"path": [
												"booking",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "[201] Create Booking - Deposit Paid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2adf50fc-66b4-4eff-953f-c7dfa19a82d2",
												"exec": [
													"const body = pm.response.json();",
													"const statusCode = pm.response.code;",
													"",
													"pm.test(\"Status Code returned is 201\", function () {",
													"    pm.expect(statusCode).to.equal(201);",
													"});",
													"",
													"pm.test(\"Expects the response body to match the 'Bookings' schema\", function () {",
													"    pm.response.to.have.jsonSchema(pm.environment.get(\"schemaCreateBooking\"));",
													"});",
													"",
													"pm.test(\"The 'roomid' displayed is the desired value\", function () {",
													"    pm.expect(body.booking).to.have.property(\"roomid\", pm.environment.get(\"roomId\"));",
													"});",
													"",
													"pm.test(\"The 'firstname' displayed is the desired value\", function () {",
													"    pm.expect(body.booking).to.have.property(\"firstname\", \"Paul\");",
													"});",
													"",
													"pm.test(\"The 'lastname' displayed is the desired value\", function () {",
													"    pm.expect(body.booking).to.have.property(\"lastname\", \"Farrell\");",
													"});",
													"",
													"pm.test(\"The 'depositpaid' is 'true'\", function () {",
													"    pm.expect(body.booking).to.have.property(\"depositpaid\", true);",
													"});",
													"",
													"pm.test(\"The 'bookingdates.checkin' date is tomorrow\", function () {",
													"    pm.expect(body.booking.bookingdates).to.have.property(\"checkin\", pm.environment.get(\"tomorrow\"));",
													"});",
													"",
													"pm.test(\"The 'bookingdates.checkout' date is one week from now\", function () {",
													"    pm.expect(body.booking.bookingdates).to.have.property(\"checkout\", pm.environment.get(\"oneWeekAway\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "de7a911a-54ab-4581-bbc5-29d021449c6f",
												"exec": [
													"pm.environment.set(\"roomId\", 50);",
													"",
													"const moment = require(\"moment\");",
													"",
													"const getDateInFutureByXDays = function (numberOfDays) {",
													"    return moment().add(numberOfDays, \"days\").format(\"YYYY-MM-DD\");",
													"};",
													"",
													"pm.environment.set(\"tomorrow\", getDateInFutureByXDays(1));",
													"pm.environment.set(\"oneWeekAway\", getDateInFutureByXDays(7));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"roomid\": {{roomId}},\n    \"firstname\": \"Paul\",\n    \"lastname\": \"Farrell\",\n    \"depositpaid\": true,\n    \"bookingdates\": {\n        \"checkin\": \"{{tomorrow}}\",\n        \"checkout\": \"{{oneWeekAway}}\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hostBooking}}/booking/",
											"host": [
												"{{hostBooking}}"
											],
											"path": [
												"booking",
												""
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "AFTER ALL:",
							"item": [
								{
									"name": "[200] Login - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4a361167-d7c8-497d-9fc5-472b19617894",
												"exec": [
													"const body = pm.response.json();",
													"const statusCode = pm.response.code;",
													"",
													"pm.test(\"Status Code returned is 200\", function() {",
													"    pm.expect(statusCode).to.equal(200);",
													"});",
													"",
													"pm.test(\"Token is returned\", function() {",
													"    pm.expect(body).to.have.property(\"token\");",
													"    pm.expect(body.token).to.not.be.empty;",
													"    pm.environment.set(\"token\", body.token);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"password\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hostAuth}}/auth/login",
											"host": [
												"{{hostAuth}}"
											],
											"path": [
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "[200] View All  Bookings",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5c96764a-8621-4af6-819d-6dc7808063b1",
												"exec": [
													"const body = pm.response.json();",
													"const statusCode = pm.response.code;",
													"",
													"pm.test(\"Status Code returned is 200\", function () {",
													"    pm.expect(statusCode).to.equal(200);",
													"});",
													"",
													"pm.test(\"Expects the response body to match the 'Bookings' schema\", function () {",
													"    pm.response.to.have.jsonSchema(pm.environment.get(\"schemaBookings\"));",
													"});",
													"",
													"let bookingsToDelete = [];",
													"body.bookings.forEach(function(booking) {",
													"    if(booking.bookingid !== 1) {",
													"        bookingsToDelete.push(booking.bookingid)",
													"    }",
													"});",
													"pm.environment.set(\"bookingsToDelete\", bookingsToDelete);",
													"pm.environment.set(\"count\", 0);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{hostBooking}}/booking/",
											"host": [
												"{{hostBooking}}"
											],
											"path": [
												"booking",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "[202] Delete Booking - Delete Test Bookings",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a6d880d9-5f45-4b5c-92c4-1261a6a75d9c",
												"exec": [
													"const count = pm.environment.get(\"count\");",
													"pm.environment.set(\"bookingId\", pm.environment.get(\"bookingsToDelete\")[count]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "78330b98-4a29-425e-ab9b-82558b04332b",
												"exec": [
													"const statusCode = pm.response.code;",
													"let count = pm.environment.get(\"count\");",
													"",
													"// Increase count by 1",
													"// Keep sending this request to delete all bookings from our 'bookingsToDelete' array",
													"if(count + 1 <= pm.environment.get(\"bookingsToDelete\").length - 1) {",
													"    pm.environment.set(\"count\", count + 1);",
													"    postman.setNextRequest(\"[202] Delete Booking - Delete Test Bookings\");",
													"}",
													"",
													"pm.test(\"Status Code returned is 202\", function () {",
													"    pm.expect(statusCode).to.equal(202);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Cookie",
												"value": "token={{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hostBooking}}/booking/{{bookingId}}",
											"host": [
												"{{hostBooking}}"
											],
											"path": [
												"booking",
												"{{bookingId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "View Booking by Booking ID",
					"item": [
						{
							"name": "[404] View Booking for Booking ID - Does Not Exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d9097dca-c74e-453e-a8aa-e00b78e88df0",
										"exec": [
											"const statusCode = pm.response.code;",
											"",
											"pm.test(\"Status Code returned is 404\", function () {",
											"    pm.expect(statusCode).to.equal(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d3375853-ca12-4577-bb49-34adc8faac91",
										"exec": [
											"pm.environment.set(\"bookingId\", 999);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{hostBooking}}/booking/{{bookingId}}",
									"host": [
										"{{hostBooking}}"
									],
									"path": [
										"booking",
										"{{bookingId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[200] View Booking for Booking ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "87ba780b-90d8-4b02-9232-778cf4b03115",
										"exec": [
											"const body = pm.response.json();",
											"const statusCode = pm.response.code;",
											"",
											"pm.test(\"Status Code returned is 200\", function () {",
											"    pm.expect(statusCode).to.equal(200);",
											"});",
											"",
											"pm.test(\"Expects the response body to match the 'View Booking by ID' schema\", function () {",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"schemaViewBookingId\"));",
											"});",
											"",
											"pm.test(\"The 'bookingid' displayed is the desired value\", function () {",
											"    pm.expect(body).to.have.property(\"bookingid\", pm.environment.get(\"bookingId\"));",
											"});",
											"",
											"pm.test(\"The 'roomid' displayed is the desired value\", function () {",
											"    pm.expect(body).to.have.property(\"roomid\", 1);",
											"});",
											"",
											"pm.test(\"The 'firstname' displayed is the desired value\", function () {",
											"    pm.expect(body).to.have.property(\"firstname\", \"James\");",
											"});",
											"",
											"pm.test(\"The 'lastname' displayed is the desired value\", function () {",
											"    pm.expect(body).to.have.property(\"lastname\", \"Dean\");",
											"});",
											"",
											"pm.test(\"The 'depositpaid' is 'true'\", function () {",
											"    pm.expect(body).to.have.property(\"depositpaid\", true);",
											"});",
											"",
											"pm.test(\"The 'bookingdates.checkin' date is the desired value\", function () {",
											"    pm.expect(body.bookingdates).to.have.property(\"checkin\", \"2020-02-01\");",
											"});",
											"",
											"pm.test(\"The 'bookingdates.checkout' date is the desired value\", function () {",
											"    pm.expect(body.bookingdates).to.have.property(\"checkout\", \"2020-02-05\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9386be6d-897f-4a6d-a517-8a44574dea7b",
										"exec": [
											"pm.environment.set(\"bookingId\", 1);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{hostBooking}}/booking/{{bookingId}}",
									"host": [
										"{{hostBooking}}"
									],
									"path": [
										"booking",
										"{{bookingId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Update Booking",
					"item": [
						{
							"name": "BEFORE ALL:",
							"item": [
								{
									"name": "[200] Login - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f7c81fa3-89a3-4508-b314-2939e2b7c1ee",
												"exec": [
													"const body = pm.response.json();",
													"const statusCode = pm.response.code;",
													"",
													"pm.test(\"Status Code returned is 200\", function() {",
													"    pm.expect(statusCode).to.equal(200);",
													"});",
													"",
													"pm.test(\"Token is returned\", function() {",
													"    pm.expect(body).to.have.property(\"token\");",
													"    pm.expect(body.token).to.not.be.empty;",
													"    pm.environment.set(\"token\", body.token);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"password\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hostAuth}}/auth/login",
											"host": [
												"{{hostAuth}}"
											],
											"path": [
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "[201] Create Booking - Deposit Not Paid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8fe81cb9-0da2-48ca-a38d-c993df91c5ec",
												"exec": [
													"const body = pm.response.json();",
													"const statusCode = pm.response.code;",
													"pm.environment.set(\"bookingId\", body.bookingid);",
													"",
													"pm.test(\"Status Code returned is 201\", function () {",
													"    pm.expect(statusCode).to.equal(201);",
													"});",
													"",
													"pm.test(\"Expects the response body to match the 'Bookings' schema\", function () {",
													"    pm.response.to.have.jsonSchema(pm.environment.get(\"schemaCreateBooking\"));",
													"});",
													"",
													"pm.test(\"The 'roomid' displayed is the desired value\", function () {",
													"    pm.expect(body.booking).to.have.property(\"roomid\", pm.environment.get(\"roomId\"));",
													"});",
													"",
													"pm.test(\"The 'firstname' displayed is the desired value\", function () {",
													"    pm.expect(body.booking).to.have.property(\"firstname\", \"Paul\");",
													"});",
													"",
													"pm.test(\"The 'lastname' displayed is the desired value\", function () {",
													"    pm.expect(body.booking).to.have.property(\"lastname\", \"Farrell\");",
													"});",
													"",
													"pm.test(\"The 'depositpaid' is 'false'\", function () {",
													"    pm.expect(body.booking).to.have.property(\"depositpaid\", false);",
													"});",
													"",
													"pm.test(\"The 'bookingdates.checkin' date is one month away\", function () {",
													"    pm.expect(body.booking.bookingdates).to.have.property(\"checkin\", pm.environment.get(\"oneMonthAway\"));",
													"});",
													"",
													"pm.test(\"The 'bookingdates.checkout' date is two months away\", function () {",
													"    pm.expect(body.booking.bookingdates).to.have.property(\"checkout\", pm.environment.get(\"twoMonthsAway\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f7ded36c-04b0-4af6-9ab4-0ecc11340391",
												"exec": [
													"pm.environment.set(\"roomId\", 20);",
													"const moment = require(\"moment\");",
													"",
													"const getDateInFutureByXMonths = function (numberOfMonths) {",
													"    return moment().add(numberOfMonths, \"months\").format(\"YYYY-MM-DD\");",
													"};",
													"",
													"pm.environment.set(\"oneMonthAway\", getDateInFutureByXMonths(1));",
													"pm.environment.set(\"twoMonthsAway\", getDateInFutureByXMonths(2));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"roomid\": {{roomId}},\n    \"firstname\": \"Paul\",\n    \"lastname\": \"Farrell\",\n    \"depositpaid\": false,\n    \"bookingdates\": {\n        \"checkin\": \"{{oneMonthAway}}\",\n        \"checkout\": \"{{twoMonthsAway}}\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hostBooking}}/booking/",
											"host": [
												"{{hostBooking}}"
											],
											"path": [
												"booking",
												""
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative Tests",
							"item": [
								{
									"name": "[403] Update Booking - Missing Token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "03998207-7da9-4a6b-bf61-cbec8c48ea17",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "148f03e6-1246-420e-b008-b6461df00af7",
												"exec": [
													"const statusCode = pm.response.code;",
													"",
													"pm.test(\"Status Code returned is 403\", function () {",
													"    pm.expect(statusCode).to.equal(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"roomid\": {{roomId}},\n    \"firstname\": \"Paul\",\n    \"lastname\": \"Farrell\",\n    \"depositpaid\": true,\n    \"bookingdates\": {\n        \"checkin\": \"{{oneMonthAway}}\",\n        \"checkout\": \"{{twoMonthsAway}}\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hostBooking}}/booking/{{bookingId}}",
											"host": [
												"{{hostBooking}}"
											],
											"path": [
												"booking",
												"{{bookingId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[200] Update Booking - MIssing Prop: roomid",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f6d9d85a-e768-406f-b292-78213de94267",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "fbaff6e8-04e3-4afa-8c30-2e81be5d37dd",
												"exec": [
													"const statusCode = pm.response.code;",
													"const body = pm.response.json();",
													"",
													"pm.test(\"Status Code returned is 400\", function () {",
													"    pm.expect(statusCode).to.equal(400);",
													"});",
													"",
													"pm.test(\"Expects the response body to match the 'Booking Error' schema\", function () {",
													"    pm.response.to.have.jsonSchema(pm.environment.get(\"schemaBookingError\"));",
													"});",
													"",
													"pm.test(\"'errorCode' is 400\", function () {",
													"    pm.expect(body).to.have.property(\"errorCode\", 400);",
													"});",
													"",
													"pm.test(\"'error' is 'BAD_REQUEST'\", function () {",
													"    pm.expect(body).to.have.property(\"error\", \"BAD_REQUEST\");",
													"});",
													"",
													"pm.test(\"'fieldErrors' array contains 1 error\", function () {",
													"    pm.expect(body.fieldErrors).to.have.lengthOf(1);",
													"});",
													"",
													"pm.test(\"'fieldErrors' array contains 'must be greater than or equal to 1' error\", function () {",
													"    pm.expect(body.fieldErrors).to.include(\"must be greater than or equal to 1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": "token={{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstname\": \"Paul\",\n    \"lastname\": \"Farrell\",\n    \"depositpaid\": true,\n    \"bookingdates\": {\n        \"checkin\": \"{{oneMonthAway}}\",\n        \"checkout\": \"{{twoMonthsAway}}\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hostBooking}}/booking/{{bookingId}}",
											"host": [
												"{{hostBooking}}"
											],
											"path": [
												"booking",
												"{{bookingId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[200] Update Booking - MIssing Prop: firstname",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9f9c9a93-a1a8-47b5-af5f-ba716fb91231",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "09e16cd6-c1cf-4d31-9a56-04a9a486cb5e",
												"exec": [
													"const statusCode = pm.response.code;",
													"const body = pm.response.json();",
													"",
													"pm.test(\"Status Code returned is 400\", function () {",
													"    pm.expect(statusCode).to.equal(400);",
													"});",
													"",
													"pm.test(\"Expects the response body to match the 'Booking Error' schema\", function () {",
													"    pm.response.to.have.jsonSchema(pm.environment.get(\"schemaBookingError\"));",
													"});",
													"",
													"pm.test(\"'errorCode' is 400\", function () {",
													"    pm.expect(body).to.have.property(\"errorCode\", 400);",
													"});",
													"",
													"pm.test(\"'error' is 'BAD_REQUEST'\", function () {",
													"    pm.expect(body).to.have.property(\"error\", \"BAD_REQUEST\");",
													"});",
													"",
													"pm.test(\"'fieldErrors' array contains 1 error\", function () {",
													"    pm.expect(body.fieldErrors).to.have.lengthOf(1);",
													"});",
													"",
													"pm.test(\"'fieldErrors' array contains 'Firstname should not be blank' error\", function () {",
													"    pm.expect(body.fieldErrors).to.include(\"Firstname should not be blank\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": "token={{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"roomid\": {{roomId}},\n    \"lastname\": \"Farrell\",\n    \"depositpaid\": true,\n    \"bookingdates\": {\n        \"checkin\": \"{{oneMonthAway}}\",\n        \"checkout\": \"{{twoMonthsAway}}\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hostBooking}}/booking/{{bookingId}}",
											"host": [
												"{{hostBooking}}"
											],
											"path": [
												"booking",
												"{{bookingId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[200] Update Booking - MIssing Prop: lastname",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "05965e44-6079-427b-89a5-1d59879d60a1",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3981f519-1ef9-43bd-8d4c-9b6cff61a869",
												"exec": [
													"const statusCode = pm.response.code;",
													"const body = pm.response.json();",
													"",
													"pm.test(\"Status Code returned is 400\", function () {",
													"    pm.expect(statusCode).to.equal(400);",
													"});",
													"",
													"pm.test(\"Expects the response body to match the 'Booking Error' schema\", function () {",
													"    pm.response.to.have.jsonSchema(pm.environment.get(\"schemaBookingError\"));",
													"});",
													"",
													"pm.test(\"'errorCode' is 400\", function () {",
													"    pm.expect(body).to.have.property(\"errorCode\", 400);",
													"});",
													"",
													"pm.test(\"'error' is 'BAD_REQUEST'\", function () {",
													"    pm.expect(body).to.have.property(\"error\", \"BAD_REQUEST\");",
													"});",
													"",
													"pm.test(\"'fieldErrors' array contains 1 error\", function () {",
													"    pm.expect(body.fieldErrors).to.have.lengthOf(1);",
													"});",
													"",
													"pm.test(\"'fieldErrors' array contains 'Lastname should not be blank' error\", function () {",
													"    pm.expect(body.fieldErrors).to.include(\"Lastname should not be blank\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": "token={{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"roomid\": {{roomId}},\n    \"firstname\": \"Paul\",\n    \"depositpaid\": true,\n    \"bookingdates\": {\n        \"checkin\": \"{{oneMonthAway}}\",\n        \"checkout\": \"{{twoMonthsAway}}\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hostBooking}}/booking/{{bookingId}}",
											"host": [
												"{{hostBooking}}"
											],
											"path": [
												"booking",
												"{{bookingId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[200] Update Booking - MIssing Prop: bookingdates.checkin",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "687c60eb-6112-4bbd-aeae-6fa088a3a9e5",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f1cbf79e-abfe-4c9f-8a3c-2bea810b4f2c",
												"exec": [
													"const statusCode = pm.response.code;",
													"const body = pm.response.json();",
													"",
													"pm.test(\"Status Code returned is 400\", function () {",
													"    pm.expect(statusCode).to.equal(400);",
													"});",
													"",
													"pm.test(\"Expects the response body to match the 'Booking Error' schema\", function () {",
													"    pm.response.to.have.jsonSchema(pm.environment.get(\"schemaBookingError\"));",
													"});",
													"",
													"pm.test(\"'errorCode' is 400\", function () {",
													"    pm.expect(body).to.have.property(\"errorCode\", 400);",
													"});",
													"",
													"pm.test(\"'error' is 'BAD_REQUEST'\", function () {",
													"    pm.expect(body).to.have.property(\"error\", \"BAD_REQUEST\");",
													"});",
													"",
													"pm.test(\"'fieldErrors' array contains 1 error\", function () {",
													"    pm.expect(body.fieldErrors).to.have.lengthOf(1);",
													"});",
													"",
													"pm.test(\"'fieldErrors' array contains 'must not be null' error\", function () {",
													"    pm.expect(body.fieldErrors).to.include(\"must not be null\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": "token={{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"roomid\": {{roomId}},\n    \"firstname\": \"Paul\",\n    \"lastname\": \"Farrell\",\n    \"depositpaid\": true,\n    \"bookingdates\": {\n        \"checkout\": \"{{twoMonthsAway}}\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hostBooking}}/booking/{{bookingId}}",
											"host": [
												"{{hostBooking}}"
											],
											"path": [
												"booking",
												"{{bookingId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[200] Update Booking - MIssing Prop: bookingdates.checkout",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "437a6f19-f98b-4896-92c9-7cf907451335",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0050fa1d-a70c-4ca7-98f5-8ca35a01a605",
												"exec": [
													"const statusCode = pm.response.code;",
													"const body = pm.response.json();",
													"",
													"pm.test(\"Status Code returned is 400\", function () {",
													"    pm.expect(statusCode).to.equal(400);",
													"});",
													"",
													"pm.test(\"Expects the response body to match the 'Booking Error' schema\", function () {",
													"    pm.response.to.have.jsonSchema(pm.environment.get(\"schemaBookingError\"));",
													"});",
													"",
													"pm.test(\"'errorCode' is 400\", function () {",
													"    pm.expect(body).to.have.property(\"errorCode\", 400);",
													"});",
													"",
													"pm.test(\"'error' is 'BAD_REQUEST'\", function () {",
													"    pm.expect(body).to.have.property(\"error\", \"BAD_REQUEST\");",
													"});",
													"",
													"pm.test(\"'fieldErrors' array contains 1 error\", function () {",
													"    pm.expect(body.fieldErrors).to.have.lengthOf(1);",
													"});",
													"",
													"pm.test(\"'fieldErrors' array contains 'must not be null' error\", function () {",
													"    pm.expect(body.fieldErrors).to.include(\"must not be null\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": "token={{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"roomid\": {{roomId}},\n    \"firstname\": \"Paul\",\n    \"lastname\": \"Farrell\",\n    \"depositpaid\": true,\n    \"bookingdates\": {\n        \"checkin\": \"{{oneMonthAway}}\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hostBooking}}/booking/{{bookingId}}",
											"host": [
												"{{hostBooking}}"
											],
											"path": [
												"booking",
												"{{bookingId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Success",
							"item": [
								{
									"name": "[200] Update Booking - Deposit Paid",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b92edaf9-5318-4965-be29-cc5d2ddba88a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "19ff6c41-bae2-4a49-aece-99ab1ba04d19",
												"exec": [
													"const body = pm.response.json();",
													"const statusCode = pm.response.code;",
													"",
													"pm.test(\"Status Code returned is 200\", function () {",
													"    pm.expect(statusCode).to.equal(200);",
													"});",
													"",
													"pm.test(\"Expects the response body to match the 'Bookings' schema\", function () {",
													"    pm.response.to.have.jsonSchema(pm.environment.get(\"schemaCreateBooking\"));",
													"});",
													"",
													"pm.test(\"The 'roomid' displayed is the desired value\", function () {",
													"    pm.expect(body.booking).to.have.property(\"roomid\", pm.environment.get(\"roomId\"));",
													"});",
													"",
													"pm.test(\"The 'firstname' displayed is the desired value\", function () {",
													"    pm.expect(body.booking).to.have.property(\"firstname\", \"Paul\");",
													"});",
													"",
													"pm.test(\"The 'lastname' displayed is the desired value\", function () {",
													"    pm.expect(body.booking).to.have.property(\"lastname\", \"Farrell\");",
													"});",
													"",
													"pm.test(\"The 'depositpaid' is 'true'\", function () {",
													"    pm.expect(body.booking).to.have.property(\"depositpaid\", true);",
													"});",
													"",
													"pm.test(\"The 'bookingdates.checkin' date is one month away\", function () {",
													"    pm.expect(body.booking.bookingdates).to.have.property(\"checkin\", pm.environment.get(\"oneMonthAway\"));",
													"});",
													"",
													"pm.test(\"The 'bookingdates.checkout' date is two months away\", function () {",
													"    pm.expect(body.booking.bookingdates).to.have.property(\"checkout\", pm.environment.get(\"twoMonthsAway\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"value": "token={{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"bookingid\": {{bookingId}},\n    \"roomid\": {{roomId}},\n    \"firstname\": \"Paul\",\n    \"lastname\": \"Farrell\",\n    \"depositpaid\": true,\n    \"bookingdates\": {\n        \"checkin\": \"{{oneMonthAway}}\",\n        \"checkout\": \"{{twoMonthsAway}}\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hostBooking}}/booking/{{bookingId}}",
											"host": [
												"{{hostBooking}}"
											],
											"path": [
												"booking",
												"{{bookingId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "AFTER ALL:",
							"item": [
								{
									"name": "[200] Login - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4a592bcb-0b49-4983-8c16-e45e50f8e8b8",
												"exec": [
													"const body = pm.response.json();",
													"const statusCode = pm.response.code;",
													"",
													"pm.test(\"Status Code returned is 200\", function() {",
													"    pm.expect(statusCode).to.equal(200);",
													"});",
													"",
													"pm.test(\"Token is returned\", function() {",
													"    pm.expect(body).to.have.property(\"token\");",
													"    pm.expect(body.token).to.not.be.empty;",
													"    pm.environment.set(\"token\", body.token);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"password\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hostAuth}}/auth/login",
											"host": [
												"{{hostAuth}}"
											],
											"path": [
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "[202] Delete Booking - Delete Test Booking",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "17d85700-f6e0-4fc6-a826-9d0b9004ceef",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0e0f3210-ef1e-4de5-a739-84aee6b6914b",
												"exec": [
													"const statusCode = pm.response.code;",
													"",
													"pm.test(\"Status Code returned is 202\", function () {",
													"    pm.expect(statusCode).to.equal(202);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Cookie",
												"value": "token={{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hostBooking}}/booking/{{bookingId}}",
											"host": [
												"{{hostBooking}}"
											],
											"path": [
												"booking",
												"{{bookingId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete Booking",
					"item": [
						{
							"name": "BEFORE ALL:",
							"item": [
								{
									"name": "[200] Login - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e30f36f9-69e6-43d0-89b6-3c18a4bff14d",
												"exec": [
													"const body = pm.response.json();",
													"const statusCode = pm.response.code;",
													"",
													"pm.test(\"Status Code returned is 200\", function() {",
													"    pm.expect(statusCode).to.equal(200);",
													"});",
													"",
													"pm.test(\"Token is returned\", function() {",
													"    pm.expect(body).to.have.property(\"token\");",
													"    pm.expect(body.token).to.not.be.empty;",
													"    pm.environment.set(\"token\", body.token);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"password\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hostAuth}}/auth/login",
											"host": [
												"{{hostAuth}}"
											],
											"path": [
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "[201] Create Booking",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6bf80744-c891-42f1-9c94-a8bac1e40cc6",
												"exec": [
													"const body = pm.response.json();",
													"const statusCode = pm.response.code;",
													"pm.environment.set(\"bookingId\", body.bookingid);",
													"",
													"pm.test(\"Status Code returned is 201\", function () {",
													"    pm.expect(statusCode).to.equal(201);",
													"});",
													"",
													"pm.test(\"Expects the response body to match the 'Bookings' schema\", function () {",
													"    pm.response.to.have.jsonSchema(pm.environment.get(\"schemaCreateBooking\"));",
													"});",
													"",
													"pm.test(\"The 'roomid' displayed is the desired value\", function () {",
													"    pm.expect(body.booking).to.have.property(\"roomid\", pm.environment.get(\"roomId\"));",
													"});",
													"",
													"pm.test(\"The 'firstname' displayed is the desired value\", function () {",
													"    pm.expect(body.booking).to.have.property(\"firstname\", \"Paul\");",
													"});",
													"",
													"pm.test(\"The 'lastname' displayed is the desired value\", function () {",
													"    pm.expect(body.booking).to.have.property(\"lastname\", \"Farrell\");",
													"});",
													"",
													"pm.test(\"The 'depositpaid' is 'false'\", function () {",
													"    pm.expect(body.booking).to.have.property(\"depositpaid\", false);",
													"});",
													"",
													"pm.test(\"The 'bookingdates.checkin' date is tomorrow\", function () {",
													"    pm.expect(body.booking.bookingdates).to.have.property(\"checkin\", pm.environment.get(\"tomorrow\"));",
													"});",
													"",
													"pm.test(\"The 'bookingdates.checkout' date is one week from now\", function () {",
													"    pm.expect(body.booking.bookingdates).to.have.property(\"checkout\", pm.environment.get(\"oneWeekAway\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "947073cc-be37-4fff-9c49-1af96929c225",
												"exec": [
													"pm.environment.set(\"roomId\", 20);",
													"",
													"const moment = require(\"moment\");",
													"",
													"const getDateInFutureByXDays = function (numberOfDays) {",
													"    return moment().add(numberOfDays, \"days\").format(\"YYYY-MM-DD\");",
													"};",
													"",
													"pm.environment.set(\"tomorrow\", getDateInFutureByXDays(1));",
													"pm.environment.set(\"oneWeekAway\", getDateInFutureByXDays(7));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"roomid\": {{roomId}},\n    \"firstname\": \"Paul\",\n    \"lastname\": \"Farrell\",\n    \"depositpaid\": false,\n    \"bookingdates\": {\n        \"checkin\": \"{{tomorrow}}\",\n        \"checkout\": \"{{oneWeekAway}}\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hostBooking}}/booking/",
											"host": [
												"{{hostBooking}}"
											],
											"path": [
												"booking",
												""
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "[403] Delete Booking - Missing Token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "97016b62-a22c-4551-834b-7a781aab4eee",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5a171285-5360-4ff0-96a6-bba449f92cd6",
										"exec": [
											"const statusCode = pm.response.code;",
											"",
											"pm.test(\"Status Code returned is 403\", function () {",
											"    pm.expect(statusCode).to.equal(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostBooking}}/booking/{{bookingId}}",
									"host": [
										"{{hostBooking}}"
									],
									"path": [
										"booking",
										"{{bookingId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[202] Delete Booking - Success",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "69cce371-2476-4d3b-adb5-537940ef424a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "24c708b3-8aed-40c5-991d-18ca8c6be761",
										"exec": [
											"const statusCode = pm.response.code;",
											"",
											"pm.test(\"Status Code returned is 202\", function () {",
											"    pm.expect(statusCode).to.equal(202);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Cookie",
										"value": "token={{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostBooking}}/booking/{{bookingId}}",
									"host": [
										"{{hostBooking}}"
									],
									"path": [
										"booking",
										"{{bookingId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[404] Delete Booking - Does Not Exist",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ed5fbb76-6b81-44e5-a34f-e8d21ea12cb2",
										"exec": [
											"pm.environment.set(\"bookingId\", 999);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "73bf1652-2c27-403b-b354-96249e19df7d",
										"exec": [
											"const statusCode = pm.response.code;",
											"",
											"pm.test(\"Status Code returned is 404\", function () {",
											"    pm.expect(statusCode).to.equal(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Cookie",
										"value": "token={{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostBooking}}/booking/{{bookingId}}",
									"host": [
										"{{hostBooking}}"
									],
									"path": [
										"booking",
										"{{bookingId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[404] View Booking for Booking ID - No Longer Exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "55c2a563-6ff5-4687-bb8a-c46b1e4910c4",
										"exec": [
											"const statusCode = pm.response.code;",
											"",
											"pm.test(\"Status Code returned is 404\", function () {",
											"    pm.expect(statusCode).to.equal(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9b067fb9-7bea-4f8a-b6b2-edeaad8353e8",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{hostBooking}}/booking/{{bookingId}}",
									"host": [
										"{{hostBooking}}"
									],
									"path": [
										"booking",
										"{{bookingId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "8cd1b95f-0e81-421f-911d-07e6453fc8c2",
						"type": "text/javascript",
						"exec": [
							"pm.environment.set(\"schemaBookings\", {",
							"    \"type\": \"object\",",
							"    \"required\": [",
							"        \"bookings\"",
							"    ],",
							"    \"properties\": {",
							"        \"bookings\": {",
							"            \"type\": \"array\",",
							"            \"additionalItems\": true,",
							"            \"items\": {",
							"                \"allOf\": [",
							"                    {",
							"                        \"type\": \"object\",",
							"                        \"required\": [",
							"                            \"bookingid\",",
							"                            \"roomid\",",
							"                            \"firstname\",",
							"                            \"lastname\",",
							"                            \"depositpaid\",",
							"                            \"bookingdates\"",
							"                        ],",
							"                        \"properties\": {",
							"                            \"bookingid\": {",
							"                                \"type\": \"integer\",",
							"                            },",
							"                            \"roomid\": {",
							"                                \"type\": \"integer\",",
							"                                \"minimum\": 1",
							"                            },",
							"                            \"firstname\": {",
							"                                \"type\": \"string\",",
							"                                \"minLength\": 3,",
							"                                \"maxLength\": 18",
							"                            },",
							"                            \"lastname\": {",
							"                                \"type\": \"string\",",
							"                                \"minLength\": 3,",
							"                                \"maxLength\": 30",
							"                            },",
							"                            \"depositpaid\": {",
							"                                \"type\": \"boolean\",",
							"                            },",
							"                            \"bookingdates\": {",
							"                                \"type\": \"object\",",
							"                                \"required\": [",
							"                                    \"checkin\",",
							"                                    \"checkout\"",
							"                                ],",
							"                                \"properties\": {",
							"                                    \"checkin\": {",
							"                                        \"type\": \"string\",",
							"                                        \"minLength\": 10,",
							"                                        \"maxLength\": 10",
							"                                    },",
							"                                    \"checkout\": {",
							"                                        \"type\": \"string\",",
							"                                        \"minLength\": 10,",
							"                                        \"maxLength\": 10",
							"                                    }",
							"                                },",
							"                                \"additionalProperties\": true",
							"                            }",
							"                        },",
							"                        \"additionalProperties\": true",
							"                    }",
							"                ]",
							"            }",
							"        }",
							"    },",
							"    \"additionalProperties\": true",
							"});",
							"",
							"pm.environment.set(\"schemaCreateBooking\", {",
							"    \"type\": \"object\",",
							"    \"required\": [",
							"        \"booking\"",
							"    ],",
							"    \"properties\": {",
							"        \"booking\": {",
							"            \"type\": \"object\",",
							"            \"required\": [",
							"                \"bookingid\",",
							"                \"roomid\",",
							"                \"firstname\",",
							"                \"lastname\",",
							"                \"depositpaid\",",
							"                \"bookingdates\"",
							"            ],",
							"            \"properties\": {",
							"                \"bookingid\": {",
							"                    \"type\": \"integer\",",
							"                    \"minimum\": 1",
							"                },",
							"                \"roomid\": {",
							"                    \"type\": \"integer\",",
							"                    \"minimum\": 1",
							"                },",
							"                \"firstname\": {",
							"                    \"type\": \"string\",",
							"                    \"minLength\": 3,",
							"                    \"maxLength\": 18",
							"                },",
							"                \"lastname\": {",
							"                    \"type\": \"string\",",
							"                    \"minLength\": 3,",
							"                    \"maxLength\": 30",
							"                },",
							"                \"depositpaid\": {",
							"                    \"type\": \"boolean\",",
							"                },",
							"                \"bookingdates\": {",
							"                    \"type\": \"object\",",
							"                    \"required\": [",
							"                        \"checkin\",",
							"                        \"checkout\"",
							"                    ],",
							"                    \"properties\": {",
							"                        \"checkin\": {",
							"                            \"type\": \"string\",",
							"                            \"minLength\": 10,",
							"                            \"maxLength\": 10",
							"                        },",
							"                        \"checkout\": {",
							"                            \"type\": \"string\",",
							"                            \"minLength\": 10,",
							"                            \"maxLength\": 10",
							"                        }",
							"                    },",
							"                    \"additionalProperties\": true",
							"                }",
							"            },",
							"            \"additionalProperties\": true",
							"        }",
							"    }",
							"});",
							"",
							"pm.environment.set(\"schemaBookingError\", {",
							"    \"type\": \"object\",",
							"    \"required\": [",
							"        \"errorCode\",",
							"        \"error\",",
							"        \"errorMessage\",",
							"        \"fieldErrors\"",
							"    ],",
							"    \"properties\": {",
							"        \"errorCode\": {",
							"            \"type\": \"integer\",",
							"            \"minimum\": 200,",
							"            \"maximum\": 599",
							"        },",
							"        \"error\": {",
							"            \"type\": \"string\",",
							"            \"minLength\": 1",
							"        },",
							"        \"errorMessage\": {",
							"            \"type\": \"string\",",
							"            \"minLength\": 1",
							"        },",
							"        \"fieldErrors\": {",
							"            \"type\": \"array\",",
							"            \"additionalItems\": true,",
							"            \"items\": {",
							"                \"allOf\": [",
							"                    {",
							"                        \"type\": \"string\",",
							"                        \"minLength\": 1",
							"                    }",
							"                ]",
							"            }",
							"        }",
							"    },",
							"    \"additionalProperties\": true",
							"});",
							"",
							"pm.environment.set(\"schemaViewBookingId\", {",
							"    \"type\": \"object\",",
							"    \"required\": [",
							"        \"bookingid\",",
							"        \"roomid\",",
							"        \"firstname\",",
							"        \"lastname\",",
							"        \"depositpaid\",",
							"        \"bookingdates\"",
							"    ],",
							"    \"properties\": {",
							"        \"bookingid\": {",
							"            \"type\": \"integer\",",
							"            \"minimum\": 1",
							"        },",
							"        \"roomid\": {",
							"            \"type\": \"integer\",",
							"            \"minimum\": 1",
							"        },",
							"        \"firstname\": {",
							"            \"type\": \"string\",",
							"            \"minLength\": 3,",
							"            \"maxLength\": 18",
							"        },",
							"        \"lastname\": {",
							"            \"type\": \"string\",",
							"            \"minLength\": 3,",
							"            \"maxLength\": 30",
							"        },",
							"        \"depositpaid\": {",
							"            \"type\": \"boolean\",",
							"        },",
							"        \"bookingdates\": {",
							"            \"type\": \"object\",",
							"            \"required\": [",
							"                \"checkin\",",
							"                \"checkout\"",
							"            ],",
							"            \"properties\": {",
							"                \"checkin\": {",
							"                    \"type\": \"string\",",
							"                    \"minLength\": 10,",
							"                    \"maxLength\": 10",
							"                },",
							"                \"checkout\": {",
							"                    \"type\": \"string\",",
							"                    \"minLength\": 10,",
							"                    \"maxLength\": 10",
							"                }",
							"            },",
							"            \"additionalProperties\": true",
							"        }",
							"    },",
							"    \"additionalProperties\": true",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "bab491a7-b5c6-427f-a316-77e9c29210fa",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Controller: Report",
			"item": [
				{
					"name": "BEFORE ALL:",
					"item": [
						{
							"name": "REMOVE ENV VARS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0347802e-dbaf-4f59-b4d6-f016f0fa99d8",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "febeeee5-4347-48cc-89df-78da81577cdb",
										"exec": [
											"// Function that removes all Env Vars apart from the 'hosts'",
											"(function () {",
											"    // Get all the names of our env variables and put them in an array",
											"    const environmentVariables = pm.environment.values.map(function (variable) {",
											"        return variable.key;",
											"    });",
											"    // Filter through the above array but don't add variables that:",
											"    // - Contain the string 'host' in the variable name",
											"    const removeTheseVariables = environmentVariables.filter(function (variable) {",
											"        return !variable.includes(\"host\");",
											"    });",
											"    // Now go through this new array and null these env variables",
											"    return removeTheseVariables.forEach(function (variableName) {",
											"        pm.environment.unset(variableName);",
											"    });",
											"})();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://postman-echo.com/delay/0",
									"protocol": "https",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"delay",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "[200] Login - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5db6baf7-b2eb-4414-a70a-d4b1d413c2a5",
										"exec": [
											"const body = pm.response.json();",
											"const statusCode = pm.response.code;",
											"",
											"pm.test(\"Status Code returned is 200\", function() {",
											"    pm.expect(statusCode).to.equal(200);",
											"});",
											"",
											"pm.test(\"Token is returned\", function() {",
											"    pm.expect(body).to.have.property(\"token\");",
											"    pm.expect(body.token).to.not.be.empty;",
											"    pm.environment.set(\"token\", body.token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"password\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostAuth}}/auth/login",
									"host": [
										"{{hostAuth}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "All Room Reports",
					"item": [
						{
							"name": "[200] View All Room Reports",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "59610e75-c187-4b1a-9777-00fe69b7fe3d",
										"exec": [
											"const statusCode = pm.response.code;",
											"const body = pm.response.json();",
											"",
											"pm.test(\"Status Code returned is 200\", function () {",
											"    pm.expect(statusCode).to.equal(200);",
											"});",
											"",
											"pm.test(\"Expects the response body to match the 'All Room Reports' schema\", function () {",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"schemaAllRoomReports\"));",
											"});",
											"",
											"pm.test(\"The 'report' array contains 1 booking\", function () {",
											"    pm.expect(body.report).to.have.a.lengthOf(1);",
											"});",
											"",
											"pm.test(\"The only booking 'start' value is '2020-02-01'\", function () {",
											"    pm.expect(body.report[0]).to.have.property(\"start\", \"2020-02-01\");",
											"});",
											"",
											"pm.test(\"The only booking 'end' value is '2020-02-05'\", function () {",
											"    pm.expect(body.report[0]).to.have.property(\"end\", \"2020-02-05\");",
											"});",
											"",
											"pm.test(\"The only booking 'title' value is 'James Dean - Room: 101'\", function () {",
											"    pm.expect(body.report[0]).to.have.property(\"title\", \"James Dean - Room: 101\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{hostReport}}/report/",
									"host": [
										"{{hostReport}}"
									],
									"path": [
										"report",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "[201] Create Booking - Room 101",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ca3af0d-83d1-4c7a-8439-b8334df3db68",
										"exec": [
											"const statusCode = pm.response.code;",
											"const body = pm.response.json();",
											"",
											"pm.environment.set(\"bookingId\", body.bookingid);",
											"",
											"pm.test(\"Status Code returned is 201\", function () {",
											"    pm.expect(statusCode).to.equal(201);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "405aded6-5a92-4564-aaf5-e92d2c2a5b4a",
										"exec": [
											"pm.environment.set(\"roomId\", 1);",
											"",
											"const moment = require(\"moment\");",
											"",
											"const getDateInFutureByXDays = function (numberOfDays) {",
											"    return moment().add(numberOfDays, \"days\").format(\"YYYY-MM-DD\");",
											"};",
											"",
											"pm.environment.set(\"tomorrow\", getDateInFutureByXDays(1));",
											"pm.environment.set(\"oneWeekAway\", getDateInFutureByXDays(7));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"roomid\": {{roomId}},\n    \"firstname\": \"Paul\",\n    \"lastname\": \"Farrell\",\n    \"depositpaid\": true,\n    \"bookingdates\": {\n        \"checkin\": \"{{tomorrow}}\",\n        \"checkout\": \"{{oneWeekAway}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostBooking}}/booking/",
									"host": [
										"{{hostBooking}}"
									],
									"path": [
										"booking",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "[200] View All Room Reports - Confirm New Booking",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f0386460-560d-4e21-aa69-7101c0ae4605",
										"exec": [
											"const statusCode = pm.response.code;",
											"const body = pm.response.json();",
											"",
											"pm.test(\"Status Code returned is 200\", function () {",
											"    pm.expect(statusCode).to.equal(200);",
											"});",
											"",
											"pm.test(\"Expects the response body to match the 'All Room Reports' schema\", function () {",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"schemaAllRoomReports\"));",
											"});",
											"",
											"pm.test(\"The 'report' array contains 2 bookings\", function () {",
											"    pm.expect(body.report).to.have.a.lengthOf(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{hostReport}}/report/",
									"host": [
										"{{hostReport}}"
									],
									"path": [
										"report",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "[202] Delete Booking",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e6d32c62-6c25-45f7-bb97-6257c983ddf3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c2e75cd0-e2c3-4f14-bede-4c0dd13aae30",
										"exec": [
											"const statusCode = pm.response.code;",
											"",
											"pm.test(\"Status Code returned is 202\", function () {",
											"    pm.expect(statusCode).to.equal(202);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostBooking}}/booking/{{bookingId}}",
									"host": [
										"{{hostBooking}}"
									],
									"path": [
										"booking",
										"{{bookingId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[200] View All Room Reports - Confirm Deleted Booking",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b20fe69f-d6bd-4c27-b6cf-87b712d1430a",
										"exec": [
											"const statusCode = pm.response.code;",
											"const body = pm.response.json();",
											"",
											"pm.test(\"Status Code returned is 200\", function () {",
											"    pm.expect(statusCode).to.equal(200);",
											"});",
											"",
											"pm.test(\"Expects the response body to match the 'All Room Reports' schema\", function () {",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"schemaAllRoomReports\"));",
											"});",
											"",
											"pm.test(\"The 'report' array contains 1 booking\", function () {",
											"    pm.expect(body.report).to.have.a.lengthOf(1);",
											"});",
											"",
											"pm.test(\"The only booking 'start' value is '2020-02-01'\", function () {",
											"    pm.expect(body.report[0]).to.have.property(\"start\", \"2020-02-01\");",
											"});",
											"",
											"pm.test(\"The only booking 'end' value is '2020-02-05'\", function () {",
											"    pm.expect(body.report[0]).to.have.property(\"end\", \"2020-02-05\");",
											"});",
											"",
											"pm.test(\"The only booking 'title' value is 'James Dean - Room: 101'\", function () {",
											"    pm.expect(body.report[0]).to.have.property(\"title\", \"James Dean - Room: 101\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{hostReport}}/report/",
									"host": [
										"{{hostReport}}"
									],
									"path": [
										"report",
										""
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Specific Room Report",
					"item": [
						{
							"name": "[200] View Specific Room Report - Invalid Room",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bda94603-deef-42dd-8521-a6fa8a82f939",
										"exec": [
											"const statusCode = pm.response.code;",
											"const body = pm.response.json();",
											"",
											"pm.test(\"Status Code returned is 200\", function () {",
											"    pm.expect(statusCode).to.equal(200);",
											"});",
											"",
											"pm.test(\"The 'report' array is empty\", function () {",
											"    pm.expect(body).to.have.property(\"report\");",
											"    pm.expect(body.report).to.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3616b3f9-f963-4442-83a9-09bc46b38260",
										"exec": [
											"pm.environment.set(\"roomId\", 999);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{hostReport}}/report/room/{{roomId}}",
									"host": [
										"{{hostReport}}"
									],
									"path": [
										"report",
										"room",
										"{{roomId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[200] View Specific Room Report - Room 101",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dabba1d7-df73-44a5-994a-098a61353846",
										"exec": [
											"const statusCode = pm.response.code;",
											"const body = pm.response.json();",
											"",
											"pm.test(\"Status Code returned is 200\", function () {",
											"    pm.expect(statusCode).to.equal(200);",
											"});",
											"",
											"pm.test(\"The 'report' array contains 1 booking\", function () {",
											"    pm.expect(body.report).to.have.a.lengthOf(1);",
											"});",
											"",
											"pm.test(\"The only booking 'start' value is '2020-02-01'\", function () {",
											"    pm.expect(body.report[0]).to.have.property(\"start\", \"2020-02-01\");",
											"});",
											"",
											"pm.test(\"The only booking 'end' value is '2020-02-05'\", function () {",
											"    pm.expect(body.report[0]).to.have.property(\"end\", \"2020-02-05\");",
											"});",
											"",
											"pm.test(\"KNOWN FAILURE - The only booking 'title' value is 'James Dean - Room: 101'\", function () {",
											"    pm.expect(body.report[0]).to.have.property(\"title\", \"James Dean - Room: 101\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5f601040-2825-4576-b65e-1fc64df1e75a",
										"exec": [
											"pm.environment.set(\"roomId\", 1);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{hostReport}}/report/room/{{roomId}}",
									"host": [
										"{{hostReport}}"
									],
									"path": [
										"report",
										"room",
										"{{roomId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[201] Create Booking - Room 102",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d6379aa0-dbf4-4762-a12d-97a2ecb78cbe",
										"exec": [
											"const statusCode = pm.response.code;",
											"const body = pm.response.json();",
											"",
											"pm.environment.set(\"bookingId\", body.bookingid);",
											"",
											"pm.test(\"Status Code returned is 201\", function () {",
											"    pm.expect(statusCode).to.equal(201);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3db88039-77f7-4a64-96bb-115949ef0697",
										"exec": [
											"pm.environment.set(\"roomId\", 2);",
											"",
											"const moment = require(\"moment\");",
											"",
											"const getDateInFutureByXDays = function (numberOfDays) {",
											"    return moment().add(numberOfDays, \"days\").format(\"YYYY-MM-DD\");",
											"};",
											"",
											"pm.environment.set(\"tomorrow\", getDateInFutureByXDays(1));",
											"pm.environment.set(\"oneWeekAway\", getDateInFutureByXDays(7));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"roomid\": {{roomId}},\n    \"firstname\": \"Paul\",\n    \"lastname\": \"Farrell\",\n    \"depositpaid\": true,\n    \"bookingdates\": {\n        \"checkin\": \"{{tomorrow}}\",\n        \"checkout\": \"{{oneWeekAway}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostBooking}}/booking/",
									"host": [
										"{{hostBooking}}"
									],
									"path": [
										"booking",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "[200] View Specific Room Report - Room 102",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fcde96d2-25ae-44d7-8f5d-e271ae1fbdab",
										"exec": [
											"const statusCode = pm.response.code;",
											"const body = pm.response.json();",
											"",
											"pm.test(\"Status Code returned is 200\", function () {",
											"    pm.expect(statusCode).to.equal(200);",
											"});",
											"",
											"pm.test(\"The 'report' array contains 1 booking\", function () {",
											"    pm.expect(body.report).to.have.a.lengthOf(1);",
											"});",
											"",
											"pm.test(\"The only booking 'start' value is one month away\", function () {",
											"    pm.expect(body.report[0]).to.have.property(\"start\", pm.environment.get(\"tomorrow\"));",
											"});",
											"",
											"pm.test(\"The only booking 'end' value is two months away\", function () {",
											"    pm.expect(body.report[0]).to.have.property(\"end\", pm.environment.get(\"oneWeekAway\"));",
											"});",
											"",
											"pm.test(\"KNOWN FAILURE - The only booking 'title' value is 'Paul Farrell - Room: 102'\", function () {",
											"    pm.expect(body.report[0]).to.have.property(\"title\", \"Paul Farrell - Room: 102\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e5fc19a5-71f4-4272-a59e-321c62277733",
										"exec": [
											"pm.environment.set(\"roomId\", 2);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{hostReport}}/report/room/2",
									"host": [
										"{{hostReport}}"
									],
									"path": [
										"report",
										"room",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "[202] Delete Booking",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "05e5c0d0-8d7d-4d46-8f85-cb703ec59ccc",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "06c21c19-df21-4894-8109-90f78964eb09",
										"exec": [
											"const statusCode = pm.response.code;",
											"",
											"pm.test(\"Status Code returned is 202\", function () {",
											"    pm.expect(statusCode).to.equal(202);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostBooking}}/booking/{{bookingId}}",
									"host": [
										"{{hostBooking}}"
									],
									"path": [
										"booking",
										"{{bookingId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[200] View Specific Room Report - Room 102 Booking Deleted",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cea65d60-324b-401c-bff3-b9141eddd70f",
										"exec": [
											"const statusCode = pm.response.code;",
											"const body = pm.response.json();",
											"",
											"pm.test(\"Status Code returned is 200\", function () {",
											"    pm.expect(statusCode).to.equal(200);",
											"});",
											"",
											"pm.test(\"The 'report' array is empty\", function () {",
											"    pm.expect(body).to.have.property(\"report\");",
											"    pm.expect(body.report).to.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "32644038-b1ae-49d9-aa75-6e7934565170",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{hostReport}}/report/room/{{roomId}}",
									"host": [
										"{{hostReport}}"
									],
									"path": [
										"report",
										"room",
										"{{roomId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "7e64c322-167c-4e1e-aee6-c22368b521ae",
						"type": "text/javascript",
						"exec": [
							"pm.environment.set(\"schemaAllRoomReports\", {",
							"    \"type\": \"object\",",
							"    \"required\": [",
							"        \"report\"",
							"    ],",
							"    \"properties\": {",
							"        \"report\": {",
							"            \"type\": \"array\",",
							"            \"additionalItems\": false,",
							"            \"items\": {",
							"                \"allOf\": [",
							"                    {",
							"                        \"type\": \"object\",",
							"                        \"required\": [",
							"                            \"start\",",
							"                            \"end\",",
							"                            \"title\"",
							"                        ],",
							"                        \"properties\": {",
							"                            \"start\": {",
							"                                \"type\": \"string\",",
							"                            },",
							"                            \"end\": {",
							"                                \"type\": \"string\",",
							"                            },",
							"                            \"title\": {",
							"                                \"type\": \"string\",",
							"                            }",
							"                        },",
							"                        \"additionalProperties\": false",
							"                    }",
							"                ]",
							"            }",
							"        }",
							"    },",
							"    \"additionalProperties\": false",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "67ec797a-c5b5-4f41-90dc-0e1e4728a19a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Controller: Messaging",
			"item": [
				{
					"name": "BEFORE ALL:",
					"item": [
						{
							"name": "REMOVE ENV VARS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2305354d-15fb-4515-8a29-a0960e95348a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d8a7c44b-48e9-461e-8204-d65213fe4e09",
										"exec": [
											"// Function that removes all Env Vars apart from the 'hosts'",
											"(function () {",
											"    // Get all the names of our env variables and put them in an array",
											"    const environmentVariables = pm.environment.values.map(function (variable) {",
											"        return variable.key;",
											"    });",
											"    // Filter through the above array but don't add variables that:",
											"    // - Contain the string 'host' in the variable name",
											"    const removeTheseVariables = environmentVariables.filter(function (variable) {",
											"        return !variable.includes(\"host\");",
											"    });",
											"    // Now go through this new array and null these env variables",
											"    return removeTheseVariables.forEach(function (variableName) {",
											"        pm.environment.unset(variableName);",
											"    });",
											"})();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://postman-echo.com/delay/0",
									"protocol": "https",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"delay",
										"0"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "View Messages",
					"item": [
						{
							"name": "[200] View All Messages",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ef27f6e2-1b19-4641-aeb8-1edc503e52f6",
										"exec": [
											"const body = pm.response.json();",
											"const statusCode = pm.response.code;",
											"",
											"pm.test(\"Status Code returned is 200\", function () {",
											"    pm.expect(statusCode).to.equal(200);",
											"});",
											"",
											"pm.test(\"Expects the response body to match the 'View All Messages' schema\", function () {",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"schemaViewAllMessages\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{hostMessaging}}/message/",
									"host": [
										"{{hostMessaging}}"
									],
									"path": [
										"message",
										""
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Create Message",
					"item": [
						{
							"name": "[201] Create New Message - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e853da48-b88b-49a3-a353-a401cd18a028",
										"exec": [
											"const body = pm.response.json();",
											"const statusCode = pm.response.code;",
											"",
											"pm.test(\"Status Code returned is 201\", function () {",
											"    pm.expect(statusCode).to.equal(201);",
											"});",
											"",
											"pm.test(\"Expects the response body to match the 'View Single Messages' schema\", function () {",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"schemaSingleMessage\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"Example Description Text\",\n    \"email\": \"testy@mctestface.com\",\n    \"name\": \"Testy McTestface\",\n    \"phone\": \"012345678910\",\n    \"subject\": \"Email body text will go here.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostMessaging}}/message/",
									"host": [
										"{{hostMessaging}}"
									],
									"path": [
										"message",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "[400] Create New Message - Missing Prop: description",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "765f1927-9b40-4525-a9d7-98449a304f02",
										"exec": [
											"const statusCode = pm.response.code;",
											"const body = pm.response.json();",
											"",
											"pm.test(\"Status Code returned is 400\", function () {",
											"    pm.expect(statusCode).to.equal(400);",
											"});",
											"",
											"pm.test(\"Expects the response body to match the 'Message Error' schema\", function () {",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"schemaMessageError\"));",
											"});",
											"",
											"pm.test(\"'errorCode' is 400\", function () {",
											"    pm.expect(body).to.have.property(\"errorCode\", 400);",
											"});",
											"",
											"pm.test(\"'error' is 'BAD_REQUEST'\", function () {",
											"    pm.expect(body).to.have.property(\"error\", \"BAD_REQUEST\");",
											"});",
											"",
											"pm.test(\"'fieldErrors' array contains 2 errors\", function () {",
											"    pm.expect(body.fieldErrors).to.have.lengthOf(2);",
											"});",
											"",
											"pm.test(\"'fieldErrors' array contains 'must not be blank' error\", function () {",
											"    pm.expect(body.fieldErrors).to.include(\"must not be blank\");",
											"});",
											"",
											"pm.test(\"'fieldErrors' array contains 'Description must be set' error\", function () {",
											"    pm.expect(body.fieldErrors).to.include(\"Description must be set\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"testy@mctestface.com\",\n    \"name\": \"Testy McTestface\",\n    \"phone\": \"012345678910\",\n    \"subject\": \"Email body text will go here.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostMessaging}}/message/",
									"host": [
										"{{hostMessaging}}"
									],
									"path": [
										"message",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "[400] Create New Message - Missing Prop: email",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "92bf3a6b-d0e5-4178-847f-8589d39bb46f",
										"exec": [
											"const statusCode = pm.response.code;",
											"const body = pm.response.json();",
											"",
											"pm.test(\"Status Code returned is 400\", function () {",
											"    pm.expect(statusCode).to.equal(400);",
											"});",
											"",
											"pm.test(\"Expects the response body to match the 'Message Error' schema\", function () {",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"schemaMessageError\"));",
											"});",
											"",
											"pm.test(\"'errorCode' is 400\", function () {",
											"    pm.expect(body).to.have.property(\"errorCode\", 400);",
											"});",
											"",
											"pm.test(\"'error' is 'BAD_REQUEST'\", function () {",
											"    pm.expect(body).to.have.property(\"error\", \"BAD_REQUEST\");",
											"});",
											"",
											"pm.test(\"'fieldErrors' array contains 2 errors\", function () {",
											"    pm.expect(body.fieldErrors).to.have.lengthOf(2);",
											"});",
											"",
											"pm.test(\"'fieldErrors' array contains 'Email must be set' error\", function () {",
											"    pm.expect(body.fieldErrors).to.include(\"Email must be set\");",
											"});",
											"",
											"pm.test(\"'fieldErrors' array contains 'must not be blank' error\", function () {",
											"    pm.expect(body.fieldErrors).to.include(\"must not be blank\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"Example Description Text\",\n    \"name\": \"Testy McTestface\",\n    \"phone\": \"012345678910\",\n    \"subject\": \"Email body text will go here.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostMessaging}}/message/",
									"host": [
										"{{hostMessaging}}"
									],
									"path": [
										"message",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "[400] Create New Message - Missing Prop: name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8546fa92-b46c-4e55-b97c-2084e249d434",
										"exec": [
											"const statusCode = pm.response.code;",
											"const body = pm.response.json();",
											"",
											"pm.test(\"Status Code returned is 400\", function () {",
											"    pm.expect(statusCode).to.equal(400);",
											"});",
											"",
											"pm.test(\"Expects the response body to match the 'Message Error' schema\", function () {",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"schemaMessageError\"));",
											"});",
											"",
											"pm.test(\"'errorCode' is 400\", function () {",
											"    pm.expect(body).to.have.property(\"errorCode\", 400);",
											"});",
											"",
											"pm.test(\"'error' is 'BAD_REQUEST'\", function () {",
											"    pm.expect(body).to.have.property(\"error\", \"BAD_REQUEST\");",
											"});",
											"",
											"pm.test(\"'fieldErrors' array contains 2 errors\", function () {",
											"    pm.expect(body.fieldErrors).to.have.lengthOf(2);",
											"});",
											"",
											"pm.test(\"'fieldErrors' array contains 'Name must be set' error\", function () {",
											"    pm.expect(body.fieldErrors).to.include(\"Name must be set\");",
											"});",
											"",
											"pm.test(\"'fieldErrors' array contains 'must not be blank' error\", function () {",
											"    pm.expect(body.fieldErrors).to.include(\"must not be blank\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"Example Description Text\",\n    \"email\": \"testy@mctestface.com\",\n    \"phone\": \"012345678910\",\n    \"subject\": \"Email body text will go here.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostMessaging}}/message/",
									"host": [
										"{{hostMessaging}}"
									],
									"path": [
										"message",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "[400] Create New Message - Missing Prop: phone",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6a8dec6a-7c19-416d-8ff9-33b89bb9324e",
										"exec": [
											"const statusCode = pm.response.code;",
											"const body = pm.response.json();",
											"",
											"pm.test(\"Status Code returned is 400\", function () {",
											"    pm.expect(statusCode).to.equal(400);",
											"});",
											"",
											"pm.test(\"Expects the response body to match the 'Message Error' schema\", function () {",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"schemaMessageError\"));",
											"});",
											"",
											"pm.test(\"'errorCode' is 400\", function () {",
											"    pm.expect(body).to.have.property(\"errorCode\", 400);",
											"});",
											"",
											"pm.test(\"'error' is 'BAD_REQUEST'\", function () {",
											"    pm.expect(body).to.have.property(\"error\", \"BAD_REQUEST\");",
											"});",
											"",
											"pm.test(\"'fieldErrors' array contains 2 errors\", function () {",
											"    pm.expect(body.fieldErrors).to.have.lengthOf(2);",
											"});",
											"",
											"pm.test(\"'fieldErrors' array contains 'Phone must be set' error\", function () {",
											"    pm.expect(body.fieldErrors).to.include(\"Phone must be set\");",
											"});",
											"",
											"pm.test(\"'fieldErrors' array contains 'must not be blank' error\", function () {",
											"    pm.expect(body.fieldErrors).to.include(\"must not be blank\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"Example Description Text\",\n    \"email\": \"testy@mctestface.com\",\n    \"name\": \"Testy McTestface\",\n    \"subject\": \"Email body text will go here.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostMessaging}}/message/",
									"host": [
										"{{hostMessaging}}"
									],
									"path": [
										"message",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "[400] Create New Message - Missing Prop: subject",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2fdf6883-eec0-4693-a517-471dc3b6af76",
										"exec": [
											"const statusCode = pm.response.code;",
											"const body = pm.response.json();",
											"",
											"pm.test(\"Status Code returned is 400\", function () {",
											"    pm.expect(statusCode).to.equal(400);",
											"});",
											"",
											"pm.test(\"Expects the response body to match the 'Message Error' schema\", function () {",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"schemaMessageError\"));",
											"});",
											"",
											"pm.test(\"'errorCode' is 400\", function () {",
											"    pm.expect(body).to.have.property(\"errorCode\", 400);",
											"});",
											"",
											"pm.test(\"'error' is 'BAD_REQUEST'\", function () {",
											"    pm.expect(body).to.have.property(\"error\", \"BAD_REQUEST\");",
											"});",
											"",
											"pm.test(\"'fieldErrors' array contains 2 errors\", function () {",
											"    pm.expect(body.fieldErrors).to.have.lengthOf(2);",
											"});",
											"",
											"pm.test(\"'fieldErrors' array contains 'Subject must be set' error\", function () {",
											"    pm.expect(body.fieldErrors).to.include(\"Subject must be set\");",
											"});",
											"",
											"pm.test(\"'fieldErrors' array contains 'must not be blank' error\", function () {",
											"    pm.expect(body.fieldErrors).to.include(\"must not be blank\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"Example Description Text\",\n    \"email\": \"testy@mctestface.com\",\n    \"name\": \"Testy McTestface\",\n    \"phone\": \"012345678910\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostMessaging}}/message/",
									"host": [
										"{{hostMessaging}}"
									],
									"path": [
										"message",
										""
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "View Individual Message",
					"item": [
						{
							"name": "[201] Create New Message - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f579d15e-9220-41b8-9455-9f24c4736985",
										"exec": [
											"const body = pm.response.json();",
											"const statusCode = pm.response.code;",
											"pm.environment.set(\"messageId\", body.messageid);",
											"",
											"pm.test(\"Status Code returned is 201\", function () {",
											"    pm.expect(statusCode).to.equal(201);",
											"});",
											"",
											"pm.test(\"Expects the response body to match the 'View Single Messages' schema\", function () {",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"schemaSingleMessage\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"Example Description Text\",\n    \"email\": \"testy@mctestface.com\",\n    \"name\": \"Testy McTestface\",\n    \"phone\": \"012345678910\",\n    \"subject\": \"Email body text will go here.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostMessaging}}/message/",
									"host": [
										"{{hostMessaging}}"
									],
									"path": [
										"message",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "[200] View Single Message",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5247a955-4e79-4319-a3b2-eca294d9030e",
										"exec": [
											"const body = pm.response.json();",
											"const statusCode = pm.response.code;",
											"",
											"pm.test(\"Status Code returned is 200\", function () {",
											"    pm.expect(statusCode).to.equal(200);",
											"});",
											"",
											"pm.test(\"Expects the response body to match the 'View Single Messages' schema\", function () {",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"schemaSingleMessage\"));",
											"});",
											"",
											"pm.test(\"'messageid' displays the desired value\", function () {",
											"    pm.expect(body).to.have.property(\"messageid\", pm.environment.get(\"messageId\"));",
											"});",
											"",
											"pm.test(\"'name' displays the desired value\", function () {",
											"    pm.expect(body).to.have.property(\"name\", \"Testy McTestface\");",
											"});",
											"",
											"pm.test(\"'email' displays the desired value\", function () {",
											"    pm.expect(body).to.have.property(\"email\", \"testy@mctestface.com\");",
											"});",
											"",
											"pm.test(\"'phone' displays the desired value\", function () {",
											"    pm.expect(body).to.have.property(\"phone\", \"012345678910\");",
											"});",
											"",
											"pm.test(\"'subject' displays the desired value\", function () {",
											"    pm.expect(body).to.have.property(\"subject\", \"Email body text will go here.\");",
											"});",
											"",
											"pm.test(\"'description' displays the desired value\", function () {",
											"    pm.expect(body).to.have.property(\"description\", \"Example Description Text\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"Example Description Text\",\n    \"email\": \"testy@mctestface.com\",\n    \"name\": \"Testy McTestface\",\n    \"phone\": \"012345678910\",\n    \"subject\": \"Email body text will go here.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostMessaging}}/message/{{messageId}}",
									"host": [
										"{{hostMessaging}}"
									],
									"path": [
										"message",
										"{{messageId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[404] View Single Message - Message ID Does Not Exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8c96364f-9d66-43ab-b69d-f952fc205741",
										"exec": [
											"const statusCode = pm.response.code;",
											"",
											"// We're receiving a 500 which isn't correct.",
											"pm.test(\"KNOWN FAILURE - Status Code returned is 404\", function () {",
											"    pm.expect(statusCode).to.equal(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "de210b28-fda4-4c05-b5ff-361a17dbe079",
										"exec": [
											"pm.environment.set(\"messageId\", 999);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"Example Description Text\",\n    \"email\": \"testy@mctestface.com\",\n    \"name\": \"Testy McTestface\",\n    \"phone\": \"012345678910\",\n    \"subject\": \"Email body text will go here.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostMessaging}}/message/{{messageId}}",
									"host": [
										"{{hostMessaging}}"
									],
									"path": [
										"message",
										"{{messageId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete Message",
					"item": [
						{
							"name": "[200] Login - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ee791e07-c36f-4ed0-aa56-b91df62f4f52",
										"exec": [
											"const body = pm.response.json();",
											"const statusCode = pm.response.code;",
											"",
											"pm.test(\"Status Code returned is 200\", function() {",
											"    pm.expect(statusCode).to.equal(200);",
											"});",
											"",
											"pm.test(\"Token is returned\", function() {",
											"    pm.expect(body).to.have.property(\"token\");",
											"    pm.expect(body.token).to.not.be.empty;",
											"    pm.environment.set(\"token\", body.token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"password\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostAuth}}/auth/login",
									"host": [
										"{{hostAuth}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[403] Delete Message - Missing Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1f599688-d60a-4d95-97be-07b990457b39",
										"exec": [
											"const statusCode = pm.response.code;",
											"",
											"pm.test(\"Status Code returned is 403\", function () {",
											"    pm.expect(statusCode).to.equal(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"Example Description Text\",\n    \"email\": \"testy@mctestface.com\",\n    \"name\": \"Testy McTestface\",\n    \"phone\": \"012345678910\",\n    \"subject\": \"Email body text will go here.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostMessaging}}/message/{{messageId}}",
									"host": [
										"{{hostMessaging}}"
									],
									"path": [
										"message",
										"{{messageId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[404] Delete Message - Message ID Does Not Exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c65ea263-6312-4d6d-8a06-e7a6c00f8335",
										"exec": [
											"const statusCode = pm.response.code;",
											"",
											"pm.test(\"Status Code returned is 404\", function () {",
											"    pm.expect(statusCode).to.equal(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "460a1aa2-84a6-4571-9c46-9c377a506f25",
										"exec": [
											"pm.environment.set(\"messageId\", 999);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Cookie",
										"value": "token={{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"Example Description Text\",\n    \"email\": \"testy@mctestface.com\",\n    \"name\": \"Testy McTestface\",\n    \"phone\": \"012345678910\",\n    \"subject\": \"Email body text will go here.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostMessaging}}/message/{{messageId}}",
									"host": [
										"{{hostMessaging}}"
									],
									"path": [
										"message",
										"{{messageId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[201] Create New Message - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f801ee40-9caa-41b8-864d-642e05a07696",
										"exec": [
											"const body = pm.response.json();",
											"const statusCode = pm.response.code;",
											"pm.environment.set(\"messageId\", body.messageid);",
											"",
											"pm.test(\"Status Code returned is 201\", function () {",
											"    pm.expect(statusCode).to.equal(201);",
											"});",
											"",
											"pm.test(\"Expects the response body to match the 'View Single Messages' schema\", function () {",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"schemaSingleMessage\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"Example Description Text\",\n    \"email\": \"testy@mctestface.com\",\n    \"name\": \"Testy McTestface\",\n    \"phone\": \"012345678910\",\n    \"subject\": \"Email body text will go here.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostMessaging}}/message/",
									"host": [
										"{{hostMessaging}}"
									],
									"path": [
										"message",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "[202] Delete Message - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3fe3882c-4c55-4921-bba5-bf2b175a28da",
										"exec": [
											"const statusCode = pm.response.code;",
											"",
											"pm.test(\"Status Code returned is 202\", function () {",
											"    pm.expect(statusCode).to.equal(202);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Cookie",
										"value": "token={{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"Example Description Text\",\n    \"email\": \"testy@mctestface.com\",\n    \"name\": \"Testy McTestface\",\n    \"phone\": \"012345678910\",\n    \"subject\": \"Email body text will go here.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostMessaging}}/message/{{messageId}}",
									"host": [
										"{{hostMessaging}}"
									],
									"path": [
										"message",
										"{{messageId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[404] View Single Message - Confirm Deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d809af3d-e6f7-4f7e-9c8a-d4a67fbed881",
										"exec": [
											"const statusCode = pm.response.code;",
											"",
											"// This should be return a 404, but we're receiving a 500",
											"pm.test(\"KNOWN FAILURE - Status Code returned is 404\", function () {",
											"    pm.expect(statusCode).to.equal(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"Example Description Text\",\n    \"email\": \"testy@mctestface.com\",\n    \"name\": \"Testy McTestface\",\n    \"phone\": \"012345678910\",\n    \"subject\": \"Email body text will go here.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostMessaging}}/message/{{messageId}}",
									"host": [
										"{{hostMessaging}}"
									],
									"path": [
										"message",
										"{{messageId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Mark Message As Read",
					"item": [
						{
							"name": "[200] Login - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "65c66e23-a19e-42c8-a103-f9c7ca1c1fc0",
										"exec": [
											"const body = pm.response.json();",
											"const statusCode = pm.response.code;",
											"",
											"pm.test(\"Status Code returned is 200\", function() {",
											"    pm.expect(statusCode).to.equal(200);",
											"});",
											"",
											"pm.test(\"Token is returned\", function() {",
											"    pm.expect(body).to.have.property(\"token\");",
											"    pm.expect(body.token).to.not.be.empty;",
											"    pm.environment.set(\"token\", body.token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"password\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostAuth}}/auth/login",
									"host": [
										"{{hostAuth}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[201] Create New Message - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e5c24405-8867-426f-b82d-ee4dba9c525e",
										"exec": [
											"const body = pm.response.json();",
											"const statusCode = pm.response.code;",
											"pm.environment.set(\"messageId\", body.messageid);",
											"",
											"pm.test(\"Status Code returned is 201\", function () {",
											"    pm.expect(statusCode).to.equal(201);",
											"});",
											"",
											"pm.test(\"Expects the response body to match the 'View Single Messages' schema\", function () {",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"schemaSingleMessage\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"Example Description Text\",\n    \"email\": \"testy@mctestface.com\",\n    \"name\": \"Testy McTestface\",\n    \"phone\": \"012345678910\",\n    \"subject\": \"Email body text will go here.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostMessaging}}/message/",
									"host": [
										"{{hostMessaging}}"
									],
									"path": [
										"message",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "[403] Mark Message As Read - Missing Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c8cda3eb-b9c1-43c6-951d-126c57bd799a",
										"exec": [
											"const statusCode = pm.response.code;",
											"",
											"pm.test(\"Status Code returned is 403\", function () {",
											"    pm.expect(statusCode).to.equal(403);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"Example Description Text\",\n    \"email\": \"testy@mctestface.com\",\n    \"name\": \"Testy McTestface\",\n    \"phone\": \"012345678910\",\n    \"subject\": \"Email body text will go here.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostMessaging}}/message/{{messageId}}/read",
									"host": [
										"{{hostMessaging}}"
									],
									"path": [
										"message",
										"{{messageId}}",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "[202] Mark Message As Read - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "90da7d8c-711c-4672-b0ae-5e00b378fcbf",
										"exec": [
											"const statusCode = pm.response.code;",
											"",
											"pm.test(\"Status Code returned is 202\", function () {",
											"    pm.expect(statusCode).to.equal(202);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"Example Description Text\",\n    \"email\": \"testy@mctestface.com\",\n    \"name\": \"Testy McTestface\",\n    \"phone\": \"012345678910\",\n    \"subject\": \"Email body text will go here.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostMessaging}}/message/{{messageId}}/read",
									"host": [
										"{{hostMessaging}}"
									],
									"path": [
										"message",
										"{{messageId}}",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "[200] View All Messages - Confirm Read Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4020da35-e4b1-4e1b-876e-d9536d7963b5",
										"exec": [
											"const body = pm.response.json();",
											"const statusCode = pm.response.code;",
											"",
											"pm.test(\"Status Code returned is 200\", function () {",
											"    pm.expect(statusCode).to.equal(200);",
											"});",
											"",
											"pm.test(\"Expects the response body to match the 'View All Messages' schema\", function () {",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"schemaViewAllMessages\"));",
											"});",
											"",
											"pm.test(\"Desired message is now marked as read\", function() {",
											"    const desiredMessage = body.messages.find(function(message) {",
											"        return message.id == pm.environment.get(\"messageId\");",
											"    });",
											"    pm.expect(desiredMessage).to.not.be.undefined;",
											"    pm.expect(desiredMessage).to.have.property(\"read\", true)",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{hostMessaging}}/message/",
									"host": [
										"{{hostMessaging}}"
									],
									"path": [
										"message",
										""
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get Message Count",
					"item": [
						{
							"name": "[200] View All Messages - Get Current Number of Messages",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "236a3625-24d3-4eef-b047-ffda05ada2c9",
										"exec": [
											"const body = pm.response.json();",
											"const statusCode = pm.response.code;",
											"",
											"",
											"pm.test(\"Status Code returned is 200\", function () {",
											"    pm.expect(statusCode).to.equal(200);",
											"});",
											"",
											"pm.test(\"Expects the response body to match the 'View All Messages' schema\", function () {",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"schemaViewAllMessages\"));",
											"});",
											"",
											"const unreadMessages = body.messages.filter(function(message) {",
											"    return message.read === false;",
											"});",
											"pm.environment.set(\"numberOfMessages\", unreadMessages.length);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{hostMessaging}}/message/",
									"host": [
										"{{hostMessaging}}"
									],
									"path": [
										"message",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "[200] Get Number of Unread Messages",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "50baddde-7324-447a-83c9-c04b13470a06",
										"exec": [
											"const body = pm.response.json();",
											"const statusCode = pm.response.code;",
											"",
											"pm.test(\"Status Code returned is 200\", function () {",
											"    pm.expect(statusCode).to.equal(200);",
											"});",
											"",
											"pm.test(\"'count' is displaying the correct number of messages\", function () {",
											"    pm.expect(body).to.have.property(\"count\", pm.environment.get(\"numberOfMessages\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{hostMessaging}}/message/count",
									"host": [
										"{{hostMessaging}}"
									],
									"path": [
										"message",
										"count"
									]
								}
							},
							"response": []
						},
						{
							"name": "[201] Create New Message - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "76f1196b-c6b9-4179-bdf0-53f56f1bde67",
										"exec": [
											"const body = pm.response.json();",
											"const statusCode = pm.response.code;",
											"",
											"pm.test(\"Status Code returned is 201\", function () {",
											"    pm.expect(statusCode).to.equal(201);",
											"});",
											"",
											"pm.test(\"Expects the response body to match the 'View Single Messages' schema\", function () {",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"schemaSingleMessage\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"Example Description Text\",\n    \"email\": \"testy@mctestface.com\",\n    \"name\": \"Testy McTestface\",\n    \"phone\": \"012345678910\",\n    \"subject\": \"Email body text will go here.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostMessaging}}/message/",
									"host": [
										"{{hostMessaging}}"
									],
									"path": [
										"message",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "[200] Get Number of Messages - Confirm New Message",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d46f50ea-93e3-431f-acf9-5c8d0bcf06ad",
										"exec": [
											"const body = pm.response.json();",
											"const statusCode = pm.response.code;",
											"",
											"pm.test(\"Status Code returned is 200\", function () {",
											"    pm.expect(statusCode).to.equal(200);",
											"});",
											"",
											"pm.test(\"'count' is displaying the correct number of messages\", function () {",
											"    pm.expect(body).to.have.property(\"count\", pm.environment.get(\"numberOfMessages\") + 1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{hostMessaging}}/message/count",
									"host": [
										"{{hostMessaging}}"
									],
									"path": [
										"message",
										"count"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "be0c8fc0-c98c-4330-a5e4-3a253caa6a8e",
						"type": "text/javascript",
						"exec": [
							"pm.environment.set(\"schemaViewAllMessages\", {",
							"    \"type\": \"object\",",
							"    \"required\": [",
							"        \"messages\"",
							"    ],",
							"    \"properties\": {",
							"        \"messages\": {",
							"            \"type\": \"array\",",
							"            \"additionalItems\": false,",
							"            \"items\": {",
							"                \"allOf\": [",
							"                    {",
							"                        \"type\": \"object\",",
							"                        \"required\": [",
							"                            \"id\",",
							"                            \"name\",",
							"                            \"subject\",",
							"                            \"read\"",
							"                        ],",
							"                        \"properties\": {",
							"                            \"id\": {",
							"                                \"type\": \"integer\",",
							"                                \"minimum\": 1",
							"                            },",
							"                            \"name\": {",
							"                                \"type\": \"string\",",
							"                                \"minLength\": 1",
							"                            },",
							"                            \"subject\": {",
							"                                \"type\": \"string\",",
							"                                \"minLength\": 1",
							"                            },",
							"                            \"read\": {",
							"                                \"type\": \"boolean\",",
							"                            }",
							"                        },",
							"                        \"additionalProperties\": false",
							"                    }",
							"                ]",
							"            }",
							"        }",
							"    },",
							"    \"additionalProperties\": false",
							"});",
							"",
							"pm.environment.set(\"schemaSingleMessage\", {",
							"    \"type\": \"object\",",
							"    \"required\": [",
							"        \"messageid\",",
							"        \"name\",",
							"        \"email\",",
							"        \"phone\",",
							"        \"subject\",",
							"        \"description\"",
							"    ],",
							"    \"properties\": {",
							"        \"messageid\": {",
							"            \"type\": \"integer\",",
							"            \"minimum\": 1",
							"        },",
							"        \"name\": {",
							"            \"type\": \"string\",",
							"            \"minLength\": 1",
							"        },",
							"        \"email\": {",
							"            \"type\": \"string\",",
							"            \"minLength\": 1",
							"        },",
							"        \"phone\": {",
							"            \"type\": \"string\",",
							"            \"minLength\": 11,",
							"            \"maxLength\": 21,",
							"        },",
							"        \"subject\": {",
							"            \"type\": \"string\",",
							"            \"minLength\": 5,",
							"            \"maxLength\": 100,",
							"        },",
							"        \"description\": {",
							"            \"type\": \"string\",",
							"            \"minLength\": 20,",
							"            \"maxLength\": 200,",
							"        }",
							"    },",
							"    \"additionalProperties\": false",
							"});",
							"",
							"pm.environment.set(\"schemaMessageError\", {",
							"    \"type\": \"object\",",
							"    \"required\": [",
							"        \"errorCode\",",
							"        \"error\",",
							"        \"errorMessage\",",
							"        \"fieldErrors\"",
							"    ],",
							"    \"properties\": {",
							"        \"errorCode\": {",
							"            \"type\": \"integer\",",
							"            \"minimum\": 200,",
							"            \"maximum\": 599",
							"        },",
							"        \"error\": {",
							"            \"type\": \"string\",",
							"            \"minLength\": 1",
							"        },",
							"        \"errorMessage\": {",
							"            \"type\": \"string\",",
							"            \"minLength\": 1",
							"        },",
							"        \"fieldErrors\": {",
							"            \"type\": \"array\",",
							"            \"additionalItems\": false,",
							"            \"items\": {",
							"                \"allOf\": [",
							"                    {",
							"                        \"type\": \"string\",",
							"                        \"minLength\": 1",
							"                    }",
							"                ]",
							"            }",
							"        }",
							"    },",
							"    \"additionalProperties\": false",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "1a10eb14-f8ee-4f5c-86ae-829d5a587ddb",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Controller: Room",
			"item": [
				{
					"name": "BEFORE ALL:",
					"item": [
						{
							"name": "REMOVE ENV VARS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5b7f61f4-3b32-42c9-8a77-8cf1f04ce62c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "935061be-2f23-4510-b50c-a70f33d774ab",
										"exec": [
											"// Function that removes all Env Vars apart from the 'hosts'",
											"(function () {",
											"    // Get all the names of our env variables and put them in an array",
											"    const environmentVariables = pm.environment.values.map(function (variable) {",
											"        return variable.key;",
											"    });",
											"    // Filter through the above array but don't add variables that:",
											"    // - Contain the string 'host' in the variable name",
											"    const removeTheseVariables = environmentVariables.filter(function (variable) {",
											"        return !variable.includes(\"host\");",
											"    });",
											"    // Now go through this new array and null these env variables",
											"    return removeTheseVariables.forEach(function (variableName) {",
											"        pm.environment.unset(variableName);",
											"    });",
											"})();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://postman-echo.com/delay/0",
									"protocol": "https",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"delay",
										"0"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "All Rooms",
					"item": [
						{
							"name": "[200] View All Rooms",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a6ea249-2151-421e-9cb5-041f6046d5a2",
										"exec": [
											"const statusCode = pm.response.code;",
											"const body = pm.response.json();",
											"",
											"pm.test(\"Status Code returned is 200\", function () {",
											"    pm.expect(statusCode).to.equal(200);",
											"});",
											"",
											"pm.test(\"Expects the response body to match the 'All Rooms' schema\", function () {",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"schemaAllRooms\"));",
											"});",
											"",
											"pm.test(\"The 'rooms' array contains 1 room\", function () {",
											"    pm.expect(body.rooms).to.have.a.lengthOf(1);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{hostRoom}}/room/",
									"host": [
										"{{hostRoom}}"
									],
									"path": [
										"room",
										""
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3fe6c737-9b2c-4261-83ff-46a3b3a681c9",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e015ddf4-83d2-4a92-bd90-6a49a5209592",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Create Room",
					"item": [
						{
							"name": "BEFORE ALL:",
							"item": [
								{
									"name": "[200] Login - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "96bcb0db-7780-4604-b3c1-e66d509f43c2",
												"exec": [
													"const body = pm.response.json();",
													"const statusCode = pm.response.code;",
													"",
													"pm.test(\"Status Code returned is 200\", function() {",
													"    pm.expect(statusCode).to.equal(200);",
													"});",
													"",
													"pm.test(\"Token is returned\", function() {",
													"    pm.expect(body).to.have.property(\"token\");",
													"    pm.expect(body.token).to.not.be.empty;",
													"    pm.environment.set(\"token\", body.token);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"password\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hostAuth}}/auth/login",
											"host": [
												"{{hostAuth}}"
											],
											"path": [
												"auth",
												"login"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative Tests",
							"item": [
								{
									"name": "[403] Create Room - No Token Supplied",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a5bb661f-564c-4925-8132-e083834c87f8",
												"exec": [
													"const statusCode = pm.response.code;",
													"",
													"pm.test(\"Status Code returned is 403\", function () {",
													"    pm.expect(statusCode).to.equal(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"accessible\": false,\n    \"description\": \"Example description goes here\",\n    \"features\": [\n        \"TV\",\n        \"WiFi\"\n    ],\n    \"image\": \"https://www.mwtestconsultancy.co.uk/img/testim/room666.jpg\",\n    \"roomNumber\": 666,\n    \"roomPrice\": 50,\n    \"type\": \"Double\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hostRoom}}/room/",
											"host": [
												"{{hostRoom}}"
											],
											"path": [
												"room",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "[400] Create Room - Missing Prop: roomNumber",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "da2aa76c-1dde-4f72-a984-dcc81bfe9d90",
												"exec": [
													"const statusCode = pm.response.code;",
													"const body = pm.response.json();",
													"",
													"pm.test(\"Status Code returned is 400\", function () {",
													"    pm.expect(statusCode).to.equal(400);",
													"});",
													"",
													"pm.test(\"'errorCode' is 400\", function () {",
													"    pm.expect(body).to.have.property(\"errorCode\", 400);",
													"});",
													"",
													"pm.test(\"'error' is 'BAD_REQUEST'\", function () {",
													"    pm.expect(body).to.have.property(\"error\", \"BAD_REQUEST\");",
													"});",
													"",
													"pm.test(\"'fieldErrors' array contains 1 error\", function () {",
													"    pm.expect(body.fieldErrors).to.have.lengthOf(1);",
													"});",
													"",
													"pm.test(\"'fieldErrors' array contains 'must be greater than or equal to 1' error\", function () {",
													"    pm.expect(body.fieldErrors).to.include(\"must be greater than or equal to 1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token={{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"accessible\": false,\n    \"description\": \"Example description goes here\",\n    \"features\": [\n        \"TV\",\n        \"WiFi\"\n    ],\n    \"image\": \"https://www.mwtestconsultancy.co.uk/img/testim/room666.jpg\",\n    \"roomPrice\": 50,\n    \"type\": \"Double\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hostRoom}}/room/",
											"host": [
												"{{hostRoom}}"
											],
											"path": [
												"room",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "[400] Create Room - Missing Prop: type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4fcf7d0d-348f-46ff-b37f-3e03b0d11dc1",
												"exec": [
													"const statusCode = pm.response.code;",
													"const body = pm.response.json();",
													"",
													"pm.test(\"Status Code returned is 400\", function () {",
													"    pm.expect(statusCode).to.equal(400);",
													"});",
													"",
													"pm.test(\"'errorCode' is 400\", function () {",
													"    pm.expect(body).to.have.property(\"errorCode\", 400);",
													"});",
													"",
													"pm.test(\"'error' is 'BAD_REQUEST'\", function () {",
													"    pm.expect(body).to.have.property(\"error\", \"BAD_REQUEST\");",
													"});",
													"",
													"pm.test(\"'fieldErrors' array contains 1 error\", function () {",
													"    pm.expect(body.fieldErrors).to.have.lengthOf(1);",
													"});",
													"",
													"pm.test(\"'fieldErrors' array contains 'Type must be set' error\", function () {",
													"    pm.expect(body.fieldErrors).to.include(\"Type must be set\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": "token={{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"accessible\": false,\n    \"description\": \"Example description goes here\",\n    \"features\": [\n        \"TV\",\n        \"WiFi\"\n    ],\n    \"image\": \"https://www.mwtestconsultancy.co.uk/img/testim/room666.jpg\",\n    \"roomNumber\": 666,\n    \"roomPrice\": 50\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hostRoom}}/room/",
											"host": [
												"{{hostRoom}}"
											],
											"path": [
												"room",
												""
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Success",
							"item": [
								{
									"name": "[201] Create Room - Room 666",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9715d6a9-f301-4740-b6c8-a55637a4d7fe",
												"exec": [
													"const statusCode = pm.response.code;",
													"const body = pm.response.json();",
													"",
													"pm.test(\"Status Code returned is 201\", function () {",
													"    pm.expect(statusCode).to.equal(201);",
													"});",
													"",
													"pm.test(\"Expects the response body to match the 'Room' schema\", function () {",
													"    pm.response.to.have.jsonSchema(pm.environment.get(\"schemaRoom\"));",
													"    pm.environment.set(\"roomId\", body.roomid);",
													"});",
													"",
													"pm.test(\"The 'roomNumber' displayed is the desired value\", function () {",
													"    pm.expect(body).to.have.property(\"roomNumber\", 666);",
													"});",
													"",
													"pm.test(\"The 'type' displayed is the desired value\", function () {",
													"    pm.expect(body).to.have.property(\"type\", \"Double\");",
													"});",
													"",
													"pm.test(\"The 'accessible' displayed is the desired value\", function () {",
													"    pm.expect(body).to.have.property(\"accessible\", false);",
													"});",
													"",
													"pm.test(\"The 'image' displayed is the desired value\", function () {",
													"    pm.expect(body).to.have.property(\"image\", \"https://www.mwtestconsultancy.co.uk/img/testim/room666.jpg\");",
													"});",
													"",
													"pm.test(\"The 'description' displayed is the desired value\", function () {",
													"    pm.expect(body).to.have.property(\"description\", \"Example description goes here\");",
													"});",
													"",
													"pm.test(\"The 'features' array contains the desired values\", function () {",
													"    pm.expect(body.features).to.contain(\"TV\");",
													"    pm.expect(body.features).to.contain(\"WiFi\");",
													"});",
													"",
													"pm.test(\"The 'roomPrice' displayed is the desired value\", function () {",
													"    pm.expect(body).to.have.property(\"roomPrice\", 50);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token={{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"accessible\": false,\n    \"description\": \"Example description goes here\",\n    \"features\": [\n        \"TV\",\n        \"WiFi\"\n    ],\n    \"image\": \"https://www.mwtestconsultancy.co.uk/img/testim/room666.jpg\",\n    \"roomNumber\": 666,\n    \"roomPrice\": 50,\n    \"type\": \"Double\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hostRoom}}/room/",
											"host": [
												"{{hostRoom}}"
											],
											"path": [
												"room",
												""
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "AFTER ALL:",
							"item": [
								{
									"name": "[202] Delete Room - Room 666",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7a737562-3e8f-4437-8d82-d2ae949e9e70",
												"exec": [
													"const statusCode = pm.response.code;",
													"",
													"pm.test(\"Status Code returned is 202\", function () {",
													"    pm.expect(statusCode).to.equal(202);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": "token={{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hostRoom}}/room/{{roomId}}",
											"host": [
												"{{hostRoom}}"
											],
											"path": [
												"room",
												"{{roomId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "View Specific Room",
					"item": [
						{
							"name": "[404] View Specific Room - Does Not Exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6624291b-6bf2-4cc2-a034-af3b50d25bc0",
										"exec": [
											"const statusCode = pm.response.code;",
											"const body = pm.response.json();",
											"",
											"// We are receiving a 500. Shouldn't this be a 404?",
											"pm.test(\"KNOWN FAILURE - Status Code returned is 404\", function () {",
											"    pm.expect(statusCode).to.equal(404);",
											"});",
											"",
											"pm.test(\"Expects the response body to match the 'Room Error' schema\", function () {",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"schemaRoomError\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ed6d46f0-4bca-403b-92b3-99cc6912c5e9",
										"exec": [
											"pm.environment.set(\"roomId\", 999);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{hostRoom}}/room/{{roomId}}",
									"host": [
										"{{hostRoom}}"
									],
									"path": [
										"room",
										"{{roomId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[200] View Specific Room",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "90a2f838-4cd1-4b12-bd62-9b6bbe2ded3b",
										"exec": [
											"const statusCode = pm.response.code;",
											"const body = pm.response.json();",
											"",
											"pm.test(\"Status Code returned is 200\", function () {",
											"    pm.expect(statusCode).to.equal(200);",
											"});",
											"",
											"pm.test(\"Expects the response body to match the 'Room' schema\", function () {",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"schemaRoom\"));",
											"});",
											"",
											"pm.test(\"The 'roomid' displayed is the desired value\", function () {",
											"    pm.expect(body).to.have.property(\"roomid\", 1);",
											"});",
											"",
											"",
											"pm.test(\"The 'roomNumber' displayed is the desired value\", function () {",
											"    pm.expect(body).to.have.property(\"roomNumber\", 101);",
											"});",
											"",
											"pm.test(\"The 'type' displayed is the desired value\", function () {",
											"    pm.expect(body).to.have.property(\"type\", \"single\");",
											"});",
											"",
											"pm.test(\"The 'accessible' displayed is the desired value\", function () {",
											"    pm.expect(body).to.have.property(\"accessible\", true);",
											"});",
											"",
											"pm.test(\"The 'image' displayed is the desired value\", function () {",
											"    pm.expect(body).to.have.property(\"image\", \"https://www.mwtestconsultancy.co.uk/img/testim/room2.jpg\");",
											"});",
											"",
											"pm.test(\"The 'description' displayed is the desired value\", function () {",
											"    pm.expect(body).to.have.property(\"description\", \"Aenean porttitor mauris sit amet lacinia molestie. In posuere accumsan aliquet. Maecenas sit amet nisl massa. Interdum et malesuada fames ac ante.\");",
											"});",
											"",
											"pm.test(\"The 'features' array contains the desired values\", function () {",
											"    pm.expect(body.features).to.contain(\"TV\");",
											"    pm.expect(body.features).to.contain(\"WiFi\");",
											"    pm.expect(body.features).to.contain(\"Safe\");",
											"});",
											"",
											"pm.test(\"The 'roomPrice' displayed is the desired value\", function () {",
											"    pm.expect(body).to.have.property(\"roomPrice\", 100);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b82592bc-57ad-47a4-b259-b87d0a7577be",
										"exec": [
											"pm.environment.set(\"roomId\", 1);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{hostRoom}}/room/{{roomId}}",
									"host": [
										"{{hostRoom}}"
									],
									"path": [
										"room",
										"{{roomId}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1bedfde9-c430-4f96-ad93-cb3966c3c38b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3d43fa1b-c33c-4fd4-976c-5c46418d12ce",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Update Room",
					"item": [
						{
							"name": "BEFORE ALL:",
							"item": [
								{
									"name": "[200] Login - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "927a70e9-7ef6-4c27-a678-af265f0c70a6",
												"exec": [
													"const body = pm.response.json();",
													"const statusCode = pm.response.code;",
													"",
													"pm.test(\"Status Code returned is 200\", function() {",
													"    pm.expect(statusCode).to.equal(200);",
													"});",
													"",
													"pm.test(\"Token is returned\", function() {",
													"    pm.expect(body).to.have.property(\"token\");",
													"    pm.expect(body.token).to.not.be.empty;",
													"    pm.environment.set(\"token\", body.token);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"password\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hostAuth}}/auth/login",
											"host": [
												"{{hostAuth}}"
											],
											"path": [
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "[201] Create Room - Room 55",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1da48de1-26b0-4553-a8a4-de782bf88c7b",
												"exec": [
													"const statusCode = pm.response.code;",
													"const body = pm.response.json();",
													"",
													"pm.test(\"Status Code returned is 201\", function () {",
													"    pm.expect(statusCode).to.equal(201);",
													"});",
													"",
													"pm.test(\"Expects the response body to match the 'Room' schema\", function () {",
													"    pm.response.to.have.jsonSchema(pm.environment.get(\"schemaRoom\"));",
													"    pm.environment.set(\"roomId\", body.roomid);",
													"});",
													"",
													"pm.test(\"The 'roomNumber' displayed is the desired value\", function () {",
													"    pm.expect(body).to.have.property(\"roomNumber\", 55);",
													"});",
													"",
													"pm.test(\"The 'type' displayed is the desired value\", function () {",
													"    pm.expect(body).to.have.property(\"type\", \"Double\");",
													"});",
													"",
													"pm.test(\"The 'accessible' displayed is the desired value\", function () {",
													"    pm.expect(body).to.have.property(\"accessible\", false);",
													"});",
													"",
													"pm.test(\"The 'image' displayed is the desired value\", function () {",
													"    pm.expect(body).to.have.property(\"image\", \"https://www.mwtestconsultancy.co.uk/img/testim/room55.jpg\");",
													"});",
													"",
													"pm.test(\"The 'description' displayed is the desired value\", function () {",
													"    pm.expect(body).to.have.property(\"description\", \"Example description goes here\");",
													"});",
													"",
													"pm.test(\"The 'features' array contains the desired values\", function () {",
													"    pm.expect(body.features).to.contain(\"TV\");",
													"    pm.expect(body.features).to.contain(\"WiFi\");",
													"});",
													"",
													"pm.test(\"The 'roomPrice' displayed is the desired value\", function () {",
													"    pm.expect(body).to.have.property(\"roomPrice\", 50);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": "token={{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"accessible\": false,\n    \"description\": \"Example description goes here\",\n    \"features\": [\n        \"TV\",\n        \"WiFi\"\n    ],\n    \"image\": \"https://www.mwtestconsultancy.co.uk/img/testim/room55.jpg\",\n    \"roomNumber\": 55,\n    \"roomPrice\": 50,\n    \"type\": \"Double\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hostRoom}}/room/",
											"host": [
												"{{hostRoom}}"
											],
											"path": [
												"room",
												""
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative Tests",
							"item": [
								{
									"name": "[404] Update Room - Room Does Not Exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9f088e71-7af2-4bda-8b0b-56f468338f88",
												"exec": [
													"const statusCode = pm.response.code;",
													"",
													"pm.test(\"Status Code returned is 404\", function () {",
													"    pm.expect(statusCode).to.equal(404);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f0517e64-ba21-494f-ac2e-44c103657147",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"value": "token={{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"accessible\": false,\n    \"description\": \"Example description goes here\",\n    \"features\": [\n        \"TV\",\n        \"WiFi\"\n    ],\n    \"image\": \"https://www.mwtestconsultancy.co.uk/img/testim/room666.jpg\",\n    \"roomNumber\": 999,\n    \"roomPrice\": 50,\n    \"type\": \"Double\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hostRoom}}/room/999",
											"host": [
												"{{hostRoom}}"
											],
											"path": [
												"room",
												"999"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Success",
							"item": [
								{
									"name": "[202] Update Room",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d86c4a36-162f-425d-bc49-b2689b4e94b3",
												"exec": [
													"const statusCode = pm.response.code;",
													"const body = pm.response.json();",
													"",
													"pm.test(\"Status Code returned is 202\", function () {",
													"    pm.expect(statusCode).to.equal(202);",
													"});",
													"",
													"pm.test(\"Expects the response body to match the 'Room' schema\", function () {",
													"    pm.response.to.have.jsonSchema(pm.environment.get(\"schemaRoom\"));",
													"});",
													"",
													"pm.test(\"The 'roomNumber' displayed is the updated value\", function () {",
													"    pm.expect(body).to.have.property(\"roomNumber\", 55);",
													"});",
													"",
													"pm.test(\"The 'type' displayed is the updated value\", function () {",
													"    pm.expect(body).to.have.property(\"type\", \"Single\");",
													"});",
													"",
													"pm.test(\"The 'accessible' displayed is the updated value\", function () {",
													"    pm.expect(body).to.have.property(\"accessible\", true);",
													"});",
													"",
													"pm.test(\"The 'image' displayed is the updated value\", function () {",
													"    pm.expect(body).to.have.property(\"image\", \"https://www.mwtestconsultancy.co.uk/img/testim/room55b.jpg\");",
													"});",
													"",
													"pm.test(\"The 'description' displayed is the updated value\", function () {",
													"    pm.expect(body).to.have.property(\"description\", \"Updated description goes here\");",
													"});",
													"",
													"pm.test(\"The 'features' array contains the updated values\", function () {",
													"    pm.expect(body.features).to.have.a.lengthOf(2);",
													"    pm.expect(body.features).to.contain(\"Gym\");",
													"    pm.expect(body.features).to.contain(\"Swimming Pool\");",
													"});",
													"",
													"pm.test(\"The 'roomPrice' displayed is the updated value\", function () {",
													"    pm.expect(body).to.have.property(\"roomPrice\", 100);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7fb6a2e-4d5b-441a-a870-b4d6a3298c8f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": "token={{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"accessible\": true,\n    \"description\": \"Updated description goes here\",\n    \"features\": [\n        \"Swimming Pool\",\n        \"Gym\"\n    ],\n    \"image\": \"https://www.mwtestconsultancy.co.uk/img/testim/room55b.jpg\",\n    \"roomNumber\": 55,\n    \"roomPrice\": 100,\n    \"type\": \"Single\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hostRoom}}/room/{{roomId}}",
											"host": [
												"{{hostRoom}}"
											],
											"path": [
												"room",
												"{{roomId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[200] View Specific Room - Confirm Updated Values",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cf02a294-c2cd-4a65-9233-9706d2b7ac22",
												"exec": [
													"const statusCode = pm.response.code;",
													"const body = pm.response.json();",
													"",
													"pm.test(\"Status Code returned is 200\", function () {",
													"    pm.expect(statusCode).to.equal(200);",
													"});",
													"",
													"pm.test(\"Expects the response body to match the 'Room' schema\", function () {",
													"    pm.response.to.have.jsonSchema(pm.environment.get(\"schemaRoom\"));",
													"});",
													"",
													"pm.test(\"The 'roomNumber' displayed is the updated value\", function () {",
													"    pm.expect(body).to.have.property(\"roomNumber\", 55);",
													"});",
													"",
													"pm.test(\"The 'type' displayed is the updated value\", function () {",
													"    pm.expect(body).to.have.property(\"type\", \"Single\");",
													"});",
													"",
													"pm.test(\"The 'accessible' displayed is the updated value\", function () {",
													"    pm.expect(body).to.have.property(\"accessible\", true);",
													"});",
													"",
													"pm.test(\"The 'image' displayed is the updated value\", function () {",
													"    pm.expect(body).to.have.property(\"image\", \"https://www.mwtestconsultancy.co.uk/img/testim/room55b.jpg\");",
													"});",
													"",
													"pm.test(\"The 'description' displayed is the updated value\", function () {",
													"    pm.expect(body).to.have.property(\"description\", \"Updated description goes here\");",
													"});",
													"",
													"pm.test(\"The 'features' array contains the updated values\", function () {",
													"    pm.expect(body.features).to.have.a.lengthOf(2);",
													"    pm.expect(body.features).to.contain(\"Gym\");",
													"    pm.expect(body.features).to.contain(\"Swimming Pool\");",
													"});",
													"",
													"pm.test(\"The 'roomPrice' displayed is the updated value\", function () {",
													"    pm.expect(body).to.have.property(\"roomPrice\", 100);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "66ec1739-3728-450b-838f-e24ef81cf07a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{hostRoom}}/room/{{roomId}}",
											"host": [
												"{{hostRoom}}"
											],
											"path": [
												"room",
												"{{roomId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[200] View All Rooms - Confirm Updated Values",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b29a7f0a-f5aa-49b3-8e78-12aa4ade90a6",
												"exec": [
													"const statusCode = pm.response.code;",
													"const body = pm.response.json();",
													"",
													"pm.test(\"Status Code returned is 200\", function () {",
													"    pm.expect(statusCode).to.equal(200);",
													"});",
													"",
													"pm.test(\"Expects the response body to match the 'All Rooms' schema\", function () {",
													"    pm.response.to.have.jsonSchema(pm.environment.get(\"schemaAllRooms\"));",
													"});",
													"",
													"pm.test(\"The 'rooms' array contains 2 rooms\", function () {",
													"    pm.expect(body.rooms).to.have.a.lengthOf(2);",
													"});",
													"",
													"const updatedRoom = body.rooms.find(function(room) {",
													"    return room.roomid == pm.environment.get(\"roomId\");",
													"});",
													"",
													"pm.test(\"The 'roomNumber' displayed is the updated value\", function () {",
													"    pm.expect(updatedRoom).to.have.property(\"roomNumber\", 55);",
													"});",
													"",
													"pm.test(\"The 'type' displayed is the updated value\", function () {",
													"    pm.expect(updatedRoom).to.have.property(\"type\", \"Single\");",
													"});",
													"",
													"pm.test(\"The 'accessible' displayed is the updated value\", function () {",
													"    pm.expect(updatedRoom).to.have.property(\"accessible\", true);",
													"});",
													"",
													"pm.test(\"The 'image' displayed is the updated value\", function () {",
													"    pm.expect(updatedRoom).to.have.property(\"image\", \"https://www.mwtestconsultancy.co.uk/img/testim/room55b.jpg\");",
													"});",
													"",
													"pm.test(\"The 'description' displayed is the updated value\", function () {",
													"    pm.expect(updatedRoom).to.have.property(\"description\", \"Updated description goes here\");",
													"});",
													"",
													"pm.test(\"The 'features' array contains the updated values\", function () {",
													"    pm.expect(updatedRoom.features).to.have.a.lengthOf(2);",
													"    pm.expect(updatedRoom.features).to.contain(\"Gym\");",
													"    pm.expect(updatedRoom.features).to.contain(\"Swimming Pool\");",
													"});",
													"",
													"pm.test(\"The 'roomPrice' displayed is the updated value\", function () {",
													"    pm.expect(updatedRoom).to.have.property(\"roomPrice\", 100);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{hostRoom}}/room/",
											"host": [
												"{{hostRoom}}"
											],
											"path": [
												"room",
												""
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "AFTER ALL:",
							"item": [
								{
									"name": "[202] Delete Room",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f4bc6828-19f8-4bf5-bd0b-65ce58691d08",
												"exec": [
													"const statusCode = pm.response.code;",
													"",
													"pm.test(\"Status Code returned is 202\", function () {",
													"    pm.expect(statusCode).to.equal(202);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": "token={{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hostRoom}}/room/{{roomId}}",
											"host": [
												"{{hostRoom}}"
											],
											"path": [
												"room",
												"{{roomId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b5aceea6-258d-411b-8ee1-a85433a7f036",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "881a1f22-b4d1-4e3e-9668-3cf8cdd1da69",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete Room",
					"item": [
						{
							"name": "BEFORE ALL:",
							"item": [
								{
									"name": "[200] Login - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d1ed8388-a6d5-4fe6-a698-27441b121b53",
												"exec": [
													"const body = pm.response.json();",
													"const statusCode = pm.response.code;",
													"",
													"pm.test(\"Status Code returned is 200\", function() {",
													"    pm.expect(statusCode).to.equal(200);",
													"});",
													"",
													"pm.test(\"Token is returned\", function() {",
													"    pm.expect(body).to.have.property(\"token\");",
													"    pm.expect(body.token).to.not.be.empty;",
													"    pm.environment.set(\"token\", body.token);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"password\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hostAuth}}/auth/login",
											"host": [
												"{{hostAuth}}"
											],
											"path": [
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "[201] Create Room - Room 55",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bf46a0c1-891d-46bd-ad6b-b2852e0e105b",
												"exec": [
													"const statusCode = pm.response.code;",
													"const body = pm.response.json();",
													"",
													"pm.test(\"Status Code returned is 201\", function () {",
													"    pm.expect(statusCode).to.equal(201);",
													"});",
													"",
													"pm.test(\"Expects the response body to match the 'Room' schema\", function () {",
													"    pm.response.to.have.jsonSchema(pm.environment.get(\"schemaRoom\"));",
													"    pm.environment.set(\"roomId\", body.roomid);",
													"});",
													"",
													"pm.test(\"The 'roomNumber' displayed is the desired value\", function () {",
													"    pm.expect(body).to.have.property(\"roomNumber\", 55);",
													"});",
													"",
													"pm.test(\"The 'type' displayed is the desired value\", function () {",
													"    pm.expect(body).to.have.property(\"type\", \"Double\");",
													"});",
													"",
													"pm.test(\"The 'accessible' displayed is the desired value\", function () {",
													"    pm.expect(body).to.have.property(\"accessible\", false);",
													"});",
													"",
													"pm.test(\"The 'image' displayed is the desired value\", function () {",
													"    pm.expect(body).to.have.property(\"image\", \"https://www.mwtestconsultancy.co.uk/img/testim/room55.jpg\");",
													"});",
													"",
													"pm.test(\"The 'description' displayed is the desired value\", function () {",
													"    pm.expect(body).to.have.property(\"description\", \"Example description goes here\");",
													"});",
													"",
													"pm.test(\"The 'features' array contains the desired values\", function () {",
													"    pm.expect(body.features).to.contain(\"TV\");",
													"    pm.expect(body.features).to.contain(\"WiFi\");",
													"});",
													"",
													"pm.test(\"The 'roomPrice' displayed is the desired value\", function () {",
													"    pm.expect(body).to.have.property(\"roomPrice\", 50);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": "token={{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"accessible\": false,\n    \"description\": \"Example description goes here\",\n    \"features\": [\n        \"TV\",\n        \"WiFi\"\n    ],\n    \"image\": \"https://www.mwtestconsultancy.co.uk/img/testim/room55.jpg\",\n    \"roomNumber\": 55,\n    \"roomPrice\": 50,\n    \"type\": \"Double\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{hostRoom}}/room/",
											"host": [
												"{{hostRoom}}"
											],
											"path": [
												"room",
												""
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "[404] Delete Room - Room Does Not Exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7dca4e98-9101-42ef-831b-f0f461fe4ebe",
										"exec": [
											"const statusCode = pm.response.code;",
											"",
											"pm.test(\"Status Code returned is 404\", function () {",
											"    pm.expect(statusCode).to.equal(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8e335eb0-9b68-4367-850f-b48a0bf66512",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostRoom}}/room/999",
									"host": [
										"{{hostRoom}}"
									],
									"path": [
										"room",
										"999"
									]
								}
							},
							"response": []
						},
						{
							"name": "[202] Delete Room",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ad65f7a3-c714-4b1e-8d5b-0034e13a8e1d",
										"exec": [
											"const statusCode = pm.response.code;",
											"",
											"pm.test(\"Status Code returned is 202\", function () {",
											"    pm.expect(statusCode).to.equal(202);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0b77089a-66f0-4b4d-b228-e448cf1eccc8",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostRoom}}/room/{{roomId}}",
									"host": [
										"{{hostRoom}}"
									],
									"path": [
										"room",
										"{{roomId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[404] View Specific Room - Confirm Deleted Room",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fb549261-7f35-4717-8118-c10c38d06144",
										"exec": [
											"const statusCode = pm.response.code;",
											"const body = pm.response.json();",
											"",
											"// We are receiving a 500. Shouldn't this be a 404?",
											"pm.test(\"KNOWN FAILURE - Status Code returned is 404\", function () {",
											"    pm.expect(statusCode).to.equal(404);",
											"});",
											"",
											"pm.test(\"Expects the response body to match the 'Room Error' schema\", function () {",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"schemaRoomError\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ced795f-e619-4c12-9706-8f7a94ce830a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{hostRoom}}/room/{{roomId}}",
									"host": [
										"{{hostRoom}}"
									],
									"path": [
										"room",
										"{{roomId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[200] View All Rooms - Confirm Deleted Room",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3a5bf06-7bb8-42f4-a5aa-fc17e326486a",
										"exec": [
											"const statusCode = pm.response.code;",
											"const body = pm.response.json();",
											"",
											"pm.test(\"Status Code returned is 200\", function () {",
											"    pm.expect(statusCode).to.equal(200);",
											"});",
											"",
											"pm.test(\"Expects the response body to match the 'All Rooms' schema\", function () {",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"schemaAllRooms\"));",
											"});",
											"",
											"pm.test(\"The 'rooms' array contains 1 room\", function () {",
											"    pm.expect(body.rooms).to.have.a.lengthOf(1);",
											"});",
											"",
											"const deletedRoom = body.rooms.find(function(room) {",
											"    return room.roomid == pm.environment.get(\"roomId\");",
											"});",
											"",
											"pm.test(\"The deleted room is not displayed\", function () {",
											"    pm.expect(deletedRoom).to.be.undefined;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{hostRoom}}/room/",
									"host": [
										"{{hostRoom}}"
									],
									"path": [
										"room",
										""
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "028080a9-5dae-4de2-b9d2-bafe14226e22",
						"type": "text/javascript",
						"exec": [
							"pm.environment.set(\"schemaAllRooms\", {",
							"    \"type\": \"object\",",
							"    \"required\": [",
							"        \"rooms\"",
							"    ],",
							"    \"properties\": {",
							"        \"rooms\": {",
							"            \"type\": \"array\",",
							"            \"additionalItems\": true,",
							"            \"items\": {",
							"                \"allOf\": [",
							"                    {",
							"                        \"type\": \"object\",",
							"                        \"required\": [",
							"                            \"roomid\",",
							"                            \"roomNumber\",",
							"                            \"type\",",
							"                            \"accessible\",",
							"                            \"image\",",
							"                            \"description\",",
							"                            \"features\",",
							"                            \"roomPrice\"",
							"                        ],",
							"                        \"properties\": {",
							"                            \"roomid\": {",
							"                                \"type\": \"integer\",",
							"                            },",
							"                            \"roomNumber\": {",
							"                                \"type\": \"integer\",",
							"                                \"minimum\": 1,",
							"                                \"maximum\": 999",
							"                            },",
							"                            \"type\": {",
							"                                \"type\": \"string\",",
							"                            },",
							"                            \"accessible\": {",
							"                                \"type\": \"boolean\",",
							"                            },",
							"                            \"image\": {",
							"                                \"type\": \"string\",",
							"                            },",
							"                            \"description\": {",
							"                                \"type\": \"string\",",
							"                            },",
							"                            \"features\": {",
							"                                \"type\": \"array\",",
							"                                \"additionalItems\": true,",
							"                                \"items\": {",
							"                                    \"allOf\": [",
							"                                        {",
							"                                            \"type\": \"string\",",
							"                                        }",
							"                                    ]",
							"                                }",
							"                            },",
							"                            \"roomPrice\": {",
							"                                \"type\": \"integer\",",
							"                                \"minimum\": 0,",
							"                                \"maximum\": 999",
							"                            }",
							"                        },",
							"                        \"additionalProperties\": true",
							"                    }",
							"                ]",
							"            }",
							"        }",
							"    },",
							"    \"additionalProperties\": true",
							"});",
							"",
							"pm.environment.set(\"schemaRoom\", {",
							"    \"type\": \"object\",",
							"    \"required\": [",
							"        \"roomid\",",
							"        \"roomNumber\",",
							"        \"type\",",
							"        \"accessible\",",
							"        \"image\",",
							"        \"description\",",
							"        \"features\",",
							"        \"roomPrice\"",
							"    ],",
							"    \"properties\": {",
							"        \"roomid\": {",
							"            \"type\": \"integer\",",
							"        },",
							"        \"roomNumber\": {",
							"            \"type\": \"integer\",",
							"            \"minimum\": 1,",
							"            \"maximum\": 999",
							"        },",
							"        \"type\": {",
							"            \"type\": \"string\",",
							"        },",
							"        \"accessible\": {",
							"            \"type\": \"boolean\",",
							"        },",
							"        \"image\": {",
							"            \"type\": \"string\",",
							"        },",
							"        \"description\": {",
							"            \"type\": \"string\",",
							"        },",
							"        \"features\": {",
							"            \"type\": \"array\",",
							"            \"additionalItems\": true,",
							"            \"items\": {",
							"                \"allOf\": [",
							"                    {",
							"                        \"type\": \"string\",",
							"                    }",
							"                ]",
							"            }",
							"        },",
							"        \"roomPrice\": {",
							"            \"type\": \"integer\",",
							"            \"minimum\": 0,",
							"            \"maximum\": 999",
							"        }",
							"    },",
							"    \"additionalProperties\": true",
							"});",
							"",
							"pm.environment.set(\"schemaRoomError\", {",
							"    \"type\": \"object\",",
							"    \"required\": [",
							"        \"timestamp\",",
							"        \"status\",",
							"        \"error\",",
							"        \"message\",",
							"        \"path\"",
							"    ],",
							"    \"properties\": {",
							"        \"timestamp\": {",
							"            \"type\": \"string\",",
							"            \"minLength\": 28,",
							"            \"maxLenth\": 28",
							"",
							"        },",
							"        \"status\": {",
							"            \"type\": \"integer\",",
							"            \"minimum\": 400",
							"        },",
							"        \"error\": {",
							"            \"type\": \"string\",",
							"            \"minLength\": 1,",
							"        },",
							"        \"message\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"path\": {",
							"            \"type\": \"string\",",
							"            \"minLength\": 7,",
							"        }",
							"    },",
							"    \"additionalProperties\": false",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "ffda1570-abd4-4808-b7a2-fd56adfd398a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}